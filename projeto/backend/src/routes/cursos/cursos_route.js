const express = require("express");
const router = express.Router();
const verificarToken = require('../../middleware/auth');
const autorizar = require('../../middleware/autorizar');
const uploadUtils = require('../../middleware/upload');
const { 
  getAllCursos, getCursosByCategoria, getTopicoArea, createCurso, getCursoById, 
  getInscricoesCurso, updateCurso, deleteCurso, getCursosSugeridos,
  getTopicosCurso, createCurso_Topicos, updateCurso_Topicos, deleteCurso_Topicos
} = require("../../controllers/cursos/cursos_ctrl");

/**
 * Rotas para gest√£o completa do sistema de cursos
 * 
 * Este m√≥dulo define todas as rotas HTTP para opera√ß√µes CRUD de cursos,
 * incluindo upload de imagens, gest√£o de t√≥picos e controlo de acesso
 * baseado em perfis de utilizador (administradores, formadores, estudantes).
 * 
 * Funcionalidades principais:
 * - Cria√ß√£o e edi√ß√£o de cursos com upload de imagens
 * - Listagem com filtros avan√ßados e pagina√ß√£o
 * - Sistema de recomenda√ß√µes personalizadas
 * - Gest√£o de t√≥picos organizacionais
 * - Controlo de acesso granular por perfil
 * - Integra√ß√£o autom√°tica com notifica√ß√µes WebSocket
 */

/**
 * Middleware especializado para tratamento de erros de upload
 * 
 * Intercepta e processa erros espec√≠ficos do Multer, fornecendo
 * mensagens de erro claras e detalhadas para diferentes tipos
 * de falhas no upload de ficheiros.
 * 
 * @param {Error} err - Erro capturado do middleware anterior
 * @param {Object} req - Objeto de requisi√ß√£o Express
 * @param {Object} res - Objeto de resposta Express
 * @param {Function} next - Fun√ß√£o para passar para o pr√≥ximo middleware
 */
const tratarErrosUpload = (err, req, res, next) => {
  console.log('üîç [UPLOAD] A processar erro de upload:', err.code || err.message);
  
  // === ERROS ESPEC√çFICOS DO MULTER ===
  
  // Ficheiro excede o tamanho m√°ximo configurado (15MB)
  if (err.code === 'LIMIT_FILE_SIZE') {
    console.error('‚ùå [UPLOAD] Ficheiro demasiado grande para o limite definido');
    return res.status(400).json({
      message: 'Ficheiro demasiado grande. O tamanho m√°ximo permitido √© 15MB.',
      error: 'LIMIT_FILE_SIZE',
      maxSize: '15MB',
      hint: 'Tenta comprimir a imagem ou usar um formato mais eficiente como WebP.'
    });
  }
  
  // Campo de ficheiro n√£o esperado na requisi√ß√£o
  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    console.error('‚ùå [UPLOAD] Campo de ficheiro inesperado:', err.field);
    return res.status(400).json({
      message: `Campo de ficheiro inesperado: "${err.field}". Apenas o campo "imagem" √© aceite.`,
      error: 'LIMIT_UNEXPECTED_FILE',
      field: err.field,
      expectedField: 'imagem'
    });
  }
  
  // Tipo de ficheiro n√£o suportado (configurado no middleware de upload)
  if (err.message && err.message.includes('Tipo de ficheiro n√£o permitido')) {
    console.error('‚ùå [UPLOAD] Tipo de ficheiro inv√°lido');
    return res.status(400).json({
      message: err.message,
      error: 'INVALID_FILE_TYPE',
      allowedTypes: ['JPEG', 'PNG', 'GIF', 'WebP', 'SVG', 'BMP', 'TIFF'],
      hint: 'Usa uma imagem nos formatos suportados: JPEG, PNG, GIF, WebP, SVG, BMP ou TIFF.'
    });
  }
  
  // Outros erros relacionados com limites do Multer
  if (err.code && err.code.startsWith('LIMIT_')) {
    console.error('‚ùå [UPLOAD] Erro de limite Multer:', err.code);
    return res.status(400).json({
      message: 'Erro no upload do ficheiro devido a limita√ß√µes do servidor',
      error: err.code,
      details: err.message
    });
  }
  
  // === ERROS PERSONALIZADOS DO SISTEMA ===
  
  // Erros de valida√ß√£o de ficheiro personalizados
  if (err.message && err.message.includes('formato n√£o suportado')) {
    console.error('‚ùå [UPLOAD] Formato de ficheiro n√£o suportado');
    return res.status(400).json({
      message: 'Formato de ficheiro n√£o suportado para imagens de curso',
      error: 'UNSUPPORTED_FORMAT',
      supportedFormats: ['JPEG', 'PNG', 'GIF', 'WebP']
    });
  }
  
  // Passar erros n√£o relacionados com upload para o handler seguinte
  console.log('‚è≠Ô∏è [UPLOAD] Erro n√£o relacionado com upload, a passar adiante');
  next(err);
};

// =============================================================================
// OPERA√á√ïES PRINCIPAIS DE GEST√ÉO DE CURSOS
// =============================================================================

/**
 * Criar novo curso com possibilidade de upload de imagem
 * 
 * POST /cursos
 * Acesso: Administradores (1) e Formadores (2)
 * 
 * Esta rota processa a cria√ß√£o completa de um curso:
 * - Aceita dados via multipart/form-data para upload de imagem
 * - Cria estrutura de diret√≥rios no sistema de ficheiros
 * - Processa e armazena imagem de capa
 * - Envia notifica√ß√µes autom√°ticas via WebSocket
 * - Suporta cria√ß√£o de t√≥picos organizacionais iniciais
 */
router.post("/", 
  verificarToken, 
  autorizar([1, 2]), 
  uploadUtils.uploadCurso.single("imagem"), 
  tratarErrosUpload,
  createCurso
);

/**
 * Listar todos os cursos dispon√≠veis
 * 
 * GET /cursos
 * Acesso: P√∫blico (sem autentica√ß√£o necess√°ria)
 * 
 * Endpoint principal para visualiza√ß√£o de cursos com capacidades avan√ßadas:
 * 
 * Query parameters suportados:
 * - page, limit: Controlo de pagina√ß√£o
 * - categoria, area, formador: Filtros por relacionamentos
 * - search: Pesquisa textual no nome do curso
 * - tipo: sincrono/assincrono
 * - estado: planeado/em_curso/terminado
 * - ativo: true/false para cursos ativos/inativos
 * - vagas: n√∫mero m√≠nimo de vagas dispon√≠veis
 * - topico: filtro por t√≥pico de √°rea espec√≠fico
 * 
 * Exemplo: GET /cursos?categoria=1&tipo=sincrono&page=2&limit=20
 */
router.get("/", getAllCursos);

/**
 * Obter cursos filtrados por categoria espec√≠fica
 * 
 * GET /cursos/por-categoria?categorias=1,2,3
 * Acesso: P√∫blico
 * 
 * Especializado para associa√ß√£o com formadores e filtros de categoria m√∫ltipla.
 * Aceita m√∫ltiplas categorias separadas por v√≠rgula para consultas flex√≠veis.
 * √ötil para construir interfaces de sele√ß√£o baseadas em compet√™ncias.
 */
router.get("/por-categoria", getCursosByCategoria);

/**
 * Obter sugest√µes personalizadas de cursos
 * 
 * GET /cursos/sugeridos
 * Acesso: Utilizadores autenticados
 * 
 * Sistema de recomenda√ß√£o inteligente que analisa:
 * - Hist√≥rico de inscri√ß√µes do utilizador
 * - Padr√µes de interesse por categoria e √°rea
 * - Disponibilidade atual dos cursos
 * 
 * Algoritmo de sugest√£o:
 * 1. Prioridade: categorias conhecidas em √°reas novas
 * 2. Fallback: cursos aleat√≥rios dispon√≠veis
 */
router.get("/sugeridos", verificarToken, getCursosSugeridos);

/**
 * Obter informa√ß√µes de t√≥pico de √°rea espec√≠fico
 * 
 * GET /cursos/topico-area/:id
 * Acesso: P√∫blico
 * 
 * Retorna dados detalhados de um t√≥pico de √°rea para:
 * - Valida√ß√µes em formul√°rios
 * - Constru√ß√£o de hierarquias de navega√ß√£o
 * - Verifica√ß√£o de exist√™ncia antes de associa√ß√µes
 */
router.get("/topico-area/:id", getTopicoArea);

/**
 * Obter detalhes completos de um curso espec√≠fico
 * 
 * GET /cursos/:id
 * Acesso: P√∫blico (com verifica√ß√µes de acesso para cursos terminados)
 * 
 * Endpoint principal para visualiza√ß√£o de curso individual:
 * - Inclui informa√ß√µes de formador, t√≥picos e associa√ß√µes
 * - Aplica regras de acesso para cursos terminados
 * - Conta inscri√ß√µes ativas para mostrar ocupa√ß√£o
 * - Carrega cursos associados para recomenda√ß√µes
 * 
 * Regras de acesso especiais:
 * - Cursos ativos: acesso livre
 * - Cursos terminados: apenas alunos inscritos podem ver detalhes
 */
router.get("/:id", getCursoById);

/**
 * Atualizar dados de curso existente
 * 
 * PUT /cursos/:id
 * Acesso: Administradores (1) e Formadores (2)
 * 
 * Funcionalidades avan√ßadas de edi√ß√£o:
 * - Suporte a upload de nova imagem de capa
 * - Renomea√ß√£o autom√°tica de diret√≥rios se o nome mudou
 * - Detec√ß√£o inteligente de altera√ß√µes relevantes
 * - Envio autom√°tico de notifica√ß√µes espec√≠ficas por tipo de altera√ß√£o
 * - Atualiza√ß√£o autom√°tica do estado baseado nas datas
 * 
 * Sistema de notifica√ß√µes inteligente:
 * - Altera√ß√µes gerais (nome, descri√ß√£o, tipo, etc.)
 * - Altera√ß√µes espec√≠ficas de formador
 * - Altera√ß√µes cr√≠ticas de cronograma (datas)
 */
router.put("/:id", 
  verificarToken, 
  autorizar([1, 2]), 
  uploadUtils.uploadCurso.single("imagem"), 
  tratarErrosUpload,
  updateCurso
);

/**
 * Eliminar curso do sistema
 * 
 * DELETE /cursos/:id
 * Acesso: Apenas Administradores (1)
 * 
 * Opera√ß√£o irrevers√≠vel e destrutiva que remove:
 * - Registo do curso na base de dados
 * - Todas as inscri√ß√µes relacionadas
 * - Estrutura completa de t√≥picos e conte√∫dos
 * - Associa√ß√µes com outros cursos
 * - Diret√≥rio completo no sistema de ficheiros
 * 
 * Processo de elimina√ß√£o hier√°rquica:
 * 1. Associa√ß√µes com outros cursos
 * 2. Inscri√ß√µes de utilizadores
 * 3. Conte√∫dos de pastas
 * 4. Pastas de t√≥picos
 * 5. T√≥picos organizacionais
 * 6. Registo principal do curso
 * 7. Diret√≥rio f√≠sico e todos os ficheiros
 */
router.delete("/:id", verificarToken, autorizar([1]), deleteCurso);

/**
 * Obter lista de inscri√ß√µes ativas num curso
 * 
 * GET /cursos/:id/inscricoes
 * Acesso: Utilizadores autenticados
 * 
 * Lista utilizadores inscritos para fins de:
 * - Gest√£o pedag√≥gica por formadores
 * - Acompanhamento por administradores
 * - Comunica√ß√£o e contacto direto
 * 
 * Inclui dados b√°sicos de contacto dos inscritos.
 */
router.get("/:id/inscricoes", verificarToken, getInscricoesCurso);

// =============================================================================
// GEST√ÉO DE T√ìPICOS E ESTRUTURA ORGANIZACIONAL DO CURSO
// =============================================================================

/**
 * Obter estrutura completa de t√≥picos de um curso
 * 
 * GET /cursos/:id/topicos
 * Acesso: P√∫blico
 * 
 * Lista todos os t√≥picos organizacionais ordenados por sequ√™ncia pedag√≥gica.
 * Apenas t√≥picos ativos s√£o retornados para construir a navega√ß√£o do curso.
 * 
 * Utilizado para:
 * - Constru√ß√£o da estrutura de navega√ß√£o
 * - Organiza√ß√£o de conte√∫dos por tema
 * - Sequ√™ncia pedag√≥gica de aprendizagem
 */
router.get("/:id/topicos", getTopicosCurso);

/**
 * Criar novo t√≥pico para organiza√ß√£o do conte√∫do
 * 
 * POST /cursos/:id/topicos
 * Acesso: Administradores (1), Formadores (2) e Estudantes (3)
 * 
 * Adiciona nova sec√ß√£o tem√°tica √† estrutura do curso:
 * - Ordena√ß√£o autom√°tica ou manual via par√¢metro 'ordem'
 * - Ativa√ß√£o autom√°tica para utiliza√ß√£o imediata
 * - Valida√ß√£o de exist√™ncia do curso pai
 * 
 * √ötil para:
 * - Organizar materiais did√°ticos por tema
 * - Criar sequ√™ncia l√≥gica de aprendizagem
 * - Estrutura√ß√£o hier√°rquica de conte√∫dos
 */
router.post("/:id/topicos", 
  verificarToken, 
  autorizar([1, 2, 3]), 
  createCurso_Topicos
);

/**
 * Atualizar t√≥pico existente
 * 
 * PUT /cursos/topicos/:id
 * Acesso: Administradores (1), Formadores (2) e Estudantes (3)
 * 
 * Permite modificar:
 * - Nome do t√≥pico para melhor identifica√ß√£o
 * - Ordem na sequ√™ncia pedag√≥gica
 * - Estado de ativa√ß√£o (ativo/inativo)
 * 
 * Suporta reordena√ß√£o da estrutura sem afetar conte√∫dos associados.
 */
router.put("/topicos/:id", 
  verificarToken, 
  autorizar([1, 2, 3]), 
  updateCurso_Topicos
);

/**
 * Eliminar t√≥pico espec√≠fico
 * 
 * DELETE /cursos/topicos/:id
 * Acesso: Administradores (1), Formadores (2) e Estudantes (3)
 * 
 * Comportamento inteligente baseado em depend√™ncias:
 * - Se tiver conte√∫dos associados: desativa em vez de eliminar
 * - Se n√£o tiver depend√™ncias: elimina permanentemente
 * 
 * Esta abordagem preserva a integridade referencial e evita
 * perda acidental de dados importantes.
 */
router.delete("/topicos/:id", 
  verificarToken, 
  autorizar([1, 2, 3]), 
  deleteCurso_Topicos
);

// =============================================================================
// MIDDLEWARES DE DEBUGGING E MONITORIZA√á√ÉO
// =============================================================================

/**
 * Middleware de logging para debug das rotas em desenvolvimento
 * 
 * Em ambiente de desenvolvimento, regista informa√ß√µes detalhadas
 * sobre cada requisi√ß√£o para facilitar debugging e monitoriza√ß√£o.
 */
if (process.env.NODE_ENV === 'development') {
  router.use((req, res, next) => {
    const userId = req.user?.id_utilizador || 'An√≥nimo';
    const method = req.method;
    const path = req.path;
    const timestamp = new Date().toISOString();
    
    console.log(`üîç [CURSOS] ${timestamp} - ${method} ${path} - Utilizador: ${userId}`);
    
    // Log de par√¢metros relevantes para debugging
    if (Object.keys(req.query).length > 0) {
      console.log(`üìã [CURSOS] Query params:`, req.query);
    }
    
    if (req.file) {
      console.log(`üìé [CURSOS] Ficheiro enviado: ${req.file.originalname} (${req.file.size} bytes)`);
    }
    
    next();
  });
}

// =============================================================================
// MIDDLEWARE DE TRATAMENTO DE ERROS ESPEC√çFICO PARA CURSOS
// =============================================================================

/**
 * Aplicar middleware de tratamento de erros de upload
 * 
 * Garante que todos os erros de upload s√£o capturados e processados
 * adequadamente antes de chegarem ao handler global de erros.
 */
router.use(tratarErrosUpload);

/**
 * Handler de erro espec√≠fico para opera√ß√µes de cursos
 * 
 * Captura erros n√£o tratados nas opera√ß√µes de curso e fornece
 * respostas consistentes e informativas sem expor detalhes
 * internos sens√≠veis em produ√ß√£o.
 */
router.use((err, req, res, next) => {
  console.error('‚ùå [CURSOS] Erro n√£o tratado na rota de cursos:', err.message);
  console.error('üìç [CURSOS] Stack trace:', err.stack);
  console.error('üåê [CURSOS] URL:', req.url);
  console.error('üë§ [CURSOS] Utilizador:', req.user?.id_utilizador || 'An√≥nimo');
  
  // Classificar tipo de erro para resposta apropriada
  let statusCode = 500;
  let message = 'Erro interno do servidor';
  
  // Erros de valida√ß√£o
  if (err.name === 'ValidationError' || err.name === 'SequelizeValidationError') {
    statusCode = 400;
    message = 'Dados inv√°lidos fornecidos';
  }
  
  // Erros de autoriza√ß√£o
  if (err.name === 'UnauthorizedError' || err.message.includes('authorization')) {
    statusCode = 401;
    message = 'Acesso n√£o autorizado';
  }
  
  // Erros de base de dados
  if (err.name && err.name.startsWith('Sequelize')) {
    statusCode = 500;
    message = 'Erro na base de dados';
  }
  
  res.status(statusCode).json({
    message: message,
    timestamp: new Date().toISOString(),
    path: req.path,
    method: req.method,
    error: process.env.NODE_ENV === 'development' ? err.message : undefined,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

// =============================================================================
// MIDDLEWARE DE VALIDA√á√ÉO DE PAR√ÇMETROS
// =============================================================================

/**
 * Middleware para validar IDs num√©ricos nos par√¢metros
 * 
 * Valida que par√¢metros de ID s√£o n√∫meros v√°lidos antes de
 * passarem para os controladores, evitando erros desnecess√°rios.
 */
router.param('id', (req, res, next, id) => {
  // Verificar se o ID √© um n√∫mero v√°lido
  if (!/^\d+$/.test(id)) {
    console.warn(`‚ö†Ô∏è [CURSOS] ID inv√°lido fornecido: ${id}`);
    return res.status(400).json({
      message: 'ID do curso deve ser um n√∫mero v√°lido',
      providedId: id,
      expected: 'n√∫mero inteiro positivo'
    });
  }
  
  // Converter para n√∫mero e validar range
  const numericId = parseInt(id, 10);
  if (numericId < 1 || numericId > 2147483647) {
    console.warn(`‚ö†Ô∏è [CURSOS] ID fora do range v√°lido: ${numericId}`);
    return res.status(400).json({
      message: 'ID do curso fora do range v√°lido',
      providedId: numericId,
      validRange: '1 - 2147483647'
    });
  }
  
  // ID v√°lido, continuar processamento
  next();
});

// =============================================================================
// ROTAS DE TESTE E DIAGN√ìSTICO (APENAS DESENVOLVIMENTO)
// =============================================================================

if (process.env.NODE_ENV === 'development') {
  /**
   * Rota de teste para verificar funcionalidade de upload
   * 
   * POST /cursos/test/upload
   * Apenas dispon√≠vel em desenvolvimento
   */
  router.post("/test/upload", 
    verificarToken,
    uploadUtils.uploadCurso.single("imagem"),
    tratarErrosUpload,
    (req, res) => {
      res.json({
        message: "Upload de teste bem-sucedido",
        file: req.file ? {
          originalname: req.file.originalname,
          mimetype: req.file.mimetype,
          size: req.file.size,
          path: req.file.path
        } : null,
        timestamp: new Date().toISOString()
      });
    }
  );

  /**
   * Rota de teste para notifica√ß√µes WebSocket
   * 
   * POST /cursos/test/notification
   * Apenas dispon√≠vel em desenvolvimento
   */
  router.post("/test/notification", verificarToken, (req, res) => {
    const { userId, message } = req.body;
    
    if (req.io) {
      req.io.to(`user_${userId || req.user.id_utilizador}`).emit('nova_notificacao', {
        titulo: "üß™ Teste de Notifica√ß√£o",
        mensagem: message || "Esta √© uma notifica√ß√£o de teste do sistema de cursos!",
        tipo: "teste",
        data: new Date(),
        isTest: true
      });
      
      res.json({
        message: "Notifica√ß√£o de teste enviada",
        targetUser: userId || req.user.id_utilizador,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({
        message: "WebSocket n√£o dispon√≠vel",
        timestamp: new Date().toISOString()
      });
    }
  });
}

module.exports = router;