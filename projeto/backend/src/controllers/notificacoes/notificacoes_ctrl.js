const Notificacao = require('../../database/models/Notificacao');
const NotificacaoUtilizador = require('../../database/models/NotificacaoUtilizador');
const User = require('../../database/models/User');
const Curso = require('../../database/models/Curso');
const Inscricao_Curso = require('../../database/models/Inscricao_Curso');
const Categoria = require('../../database/models/Categoria');
const Area = require('../../database/models/Area');
const { Op } = require('sequelize');

/**
 * Controlador completo para sistema de notifica√ß√µes em tempo real
 * 
 * Gere todo o sistema de notifica√ß√µes da plataforma, desde consultas
 * pessoais at√© cria√ß√£o autom√°tica de alertas para eventos do sistema.
 */

/**
 * Obt√©m hist√≥rico completo de notifica√ß√µes do utilizador autenticado
 * 
 * Lista todas as notifica√ß√µes dirigidas ao utilizador atual com
 * estado de leitura e dados da notifica√ß√£o original.
 * 
 * @param {Object} req - Requisi√ß√£o Express com utilizador autenticado
 * @param {Object} res - Resposta Express com lista de notifica√ß√µes
 */
const getNotificacoesUtilizador = async (req, res) => {
  try {
    const idUtilizador = req.user.id_utilizador;
    console.log(`üìñ [NOTIF] A carregar hist√≥rico de notifica√ß√µes para utilizador ${idUtilizador}`);
    
    const notificacoes = await NotificacaoUtilizador.findAll({
      where: { id_utilizador: idUtilizador },
      include: [
        { 
          model: Notificacao, 
          as: 'notificacao',
          required: true // INNER JOIN para garantir dados da notifica√ß√£o
        }
      ],
      order: [
        [{ model: Notificacao, as: 'notificacao' }, 'data_criacao', 'DESC']
      ]
    });
    
    console.log(`‚úÖ [NOTIF] ${notificacoes.length} notifica√ß√µes carregadas para utilizador ${idUtilizador}`);
    
    // Debug: mostrar estrutura das notifica√ß√µes encontradas
    if (process.env.NODE_ENV === 'development' && notificacoes.length > 0) {
      console.log('üîç [NOTIF] Estrutura da primeira notifica√ß√£o:', JSON.stringify(notificacoes[0], null, 2));
    }
    
    return res.status(200).json(notificacoes);
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao obter notifica√ß√µes:', error.message);
    console.error('üìã [NOTIF] Stack trace:', error.stack);
    return res.status(500).json({ 
      message: 'Erro ao obter notifica√ß√µes',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Marca notifica√ß√£o espec√≠fica como lida
 * 
 * Atualiza estado individual e regista timestamp de leitura
 * para auditoria e estat√≠sticas de engagement.
 * 
 * @param {Object} req - Requisi√ß√£o com ID da notifica√ß√£o nos par√¢metros
 * @param {Object} res - Resposta Express com confirma√ß√£o
 */
const marcarComoLida = async (req, res) => {
  try {
    const idUtilizador = req.user.id_utilizador;
    const { id_notificacao } = req.params;
    
    console.log(`‚úì [NOTIF] A marcar notifica√ß√£o ${id_notificacao} como lida para utilizador ${idUtilizador}`);
    
    const notificacaoUtilizador = await NotificacaoUtilizador.findOne({
      where: { id_utilizador: idUtilizador, id_notificacao }
    });
    
    if (!notificacaoUtilizador) {
      console.warn(`‚ö†Ô∏è [NOTIF] Notifica√ß√£o ${id_notificacao} n√£o encontrada para utilizador ${idUtilizador}`);
      return res.status(404).json({ message: 'Notifica√ß√£o n√£o encontrada' });
    }
    
    // Atualizar estado e timestamp de leitura
    notificacaoUtilizador.lida = true;
    notificacaoUtilizador.data_leitura = new Date();
    await notificacaoUtilizador.save();
    
    console.log(`‚úÖ [NOTIF] Notifica√ß√£o ${id_notificacao} marcada como lida`);
    return res.status(200).json({ message: 'Notifica√ß√£o marcada como lida' });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao marcar notifica√ß√£o como lida:', error.message);
    return res.status(500).json({ 
      message: 'Erro ao marcar notifica√ß√£o como lida',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Marca todas as notifica√ß√µes como lidas
 * 
 * Opera√ß√£o em lote otimizada para limpar todas as notifica√ß√µes
 * pendentes do utilizador.
 * 
 * @param {Object} req - Requisi√ß√£o Express com utilizador autenticado
 * @param {Object} res - Resposta Express com estat√≠sticas da opera√ß√£o
 */
const marcarTodasComoLidas = async (req, res) => {
  try {
    const idUtilizador = req.user.id_utilizador;
    console.log(`‚úì [NOTIF] A marcar todas as notifica√ß√µes como lidas para utilizador ${idUtilizador}`);
    
    // Atualiza√ß√£o em lote para melhor performance
    const [numAtualizadas] = await NotificacaoUtilizador.update(
      { lida: true, data_leitura: new Date() },
      { where: { id_utilizador: idUtilizador, lida: false } }
    );
    
    console.log(`‚úÖ [NOTIF] ${numAtualizadas} notifica√ß√µes marcadas como lidas para utilizador ${idUtilizador}`);
    return res.status(200).json({ 
      message: 'Todas as notifica√ß√µes marcadas como lidas',
      notificacoesAtualizadas: numAtualizadas
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao marcar todas como lidas:', error.message);
    return res.status(500).json({ 
      message: 'Erro ao marcar notifica√ß√µes',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Obt√©m contagem de notifica√ß√µes n√£o lidas
 * 
 * Endpoint otimizado para badges e indicadores visuais.
 * Retorna apenas o n√∫mero para atualiza√ß√µes frequentes.
 * 
 * @param {Object} req - Requisi√ß√£o Express com utilizador autenticado
 * @param {Object} res - Resposta Express com contagem
 */
const getNotificacoesNaoLidasContagem = async (req, res) => {
  try {
    const idUtilizador = req.user.id_utilizador;
    
    const count = await NotificacaoUtilizador.count({
      where: { id_utilizador: idUtilizador, lida: false }
    });
    
    console.log(`üìä [NOTIF] ${count} notifica√ß√µes n√£o lidas para utilizador ${idUtilizador}`);
    return res.status(200).json({ count });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao obter contagem:', error.message);
    return res.status(500).json({ 
      message: 'Erro ao obter contagem de notifica√ß√µes',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Cria notifica√ß√£o central e distribui a m√∫ltiplos destinat√°rios
 * 
 * Fun√ß√£o nuclear que cria a notifica√ß√£o base e distribui
 * automaticamente atrav√©s da tabela de relacionamento.
 * 
 * @param {string} titulo - T√≠tulo da notifica√ß√£o
 * @param {string} mensagem - Conte√∫do detalhado
 * @param {string} tipo - Categoria da notifica√ß√£o
 * @param {number} idReferencia - ID do objeto relacionado
 * @param {Array} destinatarios - Array de IDs de utilizadores alvo
 * @returns {Promise<Object>} Resultado com notifica√ß√£o e associa√ß√µes
 */
const criarEAssociarNotificacao = async (titulo, mensagem, tipo, idReferencia, destinatarios) => {
  try {
    console.log(`üì§ [NOTIF] A criar notifica√ß√£o "${titulo}" para ${destinatarios.length} destinat√°rios`);
    
    // Criar registo central da notifica√ß√£o
    const notificacao = await Notificacao.create({
      titulo,
      mensagem,
      tipo,
      id_referencia: idReferencia,
      data_criacao: new Date(),
      enviado_email: false // Para sistema futuro de envio por email
    });

    console.log(`‚úÖ [NOTIF] Notifica√ß√£o central criada com ID ${notificacao.id_notificacao}`);

    // Criar associa√ß√µes individuais para cada destinat√°rio
    const associacoesPromises = destinatarios.map(async (idUtilizador) => {
      try {
        const novaAssociacao = await NotificacaoUtilizador.create({
          id_notificacao: notificacao.id_notificacao,
          id_utilizador: idUtilizador,
          lida: false,
          data_leitura: null
        });

        console.log(`‚úì [NOTIF] Associa√ß√£o criada para utilizador ${idUtilizador}`);
        return novaAssociacao;
      } catch (error) {
        console.error(`‚ùå [NOTIF] Erro ao associar para utilizador ${idUtilizador}:`, error.message);
        return null; // Continuar com outros destinat√°rios
      }
    });

    // Aguardar cria√ß√£o de todas as associa√ß√µes
    const associacoes = await Promise.all(associacoesPromises);
    const associacoesSucesso = associacoes.filter(a => a !== null);

    console.log(`‚úÖ [NOTIF] ${associacoesSucesso.length}/${destinatarios.length} associa√ß√µes criadas com sucesso`);

    return {
      notificacao,
      associacoes: associacoesSucesso
    };
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao criar e associar notifica√ß√£o:', error.message);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o push instant√¢nea via WebSocket
 * 
 * Transmite alertas em tempo real para utilizadores ligados,
 * complementando o sistema de persist√™ncia na base de dados.
 * 
 * @param {Object} io - Inst√¢ncia do Socket.IO do servidor
 * @param {number} id_utilizador - ID do utilizador destinat√°rio
 * @param {string} titulo - T√≠tulo da notifica√ß√£o
 * @param {string} mensagem - Conte√∫do da mensagem
 * @param {string} tipo - Tipo da notifica√ß√£o
 * @param {Object} dados - Dados adicionais contextuais
 */
const enviarPushNotification = async (io, id_utilizador, titulo, mensagem, tipo, dados = {}) => {
  try {
    if (io && io.to) {
      console.log(`üì° [NOTIF] A enviar push WebSocket para utilizador ${id_utilizador}`);
      
      // Enviar para sala espec√≠fica do utilizador
      io.to(`user_${id_utilizador}`).emit('nova_notificacao', {
        titulo,
        mensagem,
        tipo,
        data: new Date(),
        ...dados
      });
      
      console.log(`‚úÖ [NOTIF] Push WebSocket enviado com sucesso para utilizador ${id_utilizador}`);
    } else {
      console.warn('‚ö†Ô∏è [NOTIF] WebSocket n√£o dispon√≠vel - apenas persist√™ncia na BD');
    }
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro no push WebSocket:', error.message);
    // N√£o falhar por erros de WebSocket
  }
};

/**
 * Notifica cria√ß√£o de novo administrador (alerta de seguran√ßa)
 * 
 * Envia alerta cr√≠tico para todos os administradores existentes
 * sobre mudan√ßas nas permiss√µes administrativas.
 * 
 * @param {Object} req - Requisi√ß√£o com dados do novo administrador
 * @param {Object} res - Resposta Express com resultado
 */
const adminCriado = async (req, res) => {
  try {
    const { id_admin, nome_admin } = req.body;

    if (!id_admin || !nome_admin) {
      console.warn('‚ö†Ô∏è [NOTIF] Dados insuficientes para notifica√ß√£o de admin criado');
      return res.status(400).json({
        success: false,
        message: "ID e nome do administrador s√£o obrigat√≥rios"
      });
    }

    console.log(`üîê [NOTIF] A processar cria√ß√£o de administrador: ${nome_admin} (ID: ${id_admin})`);

    // Procurar todos os administradores ativos
    const administradores = await User.findAll({
      where: { id_cargo: 1 }, // Cargo 1 = Administrador
      attributes: ['id_utilizador']
    });

    if (administradores.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Nenhum administrador existente para notificar');
      return res.status(200).json({
        success: true,
        message: "Nenhum administrador para notificar",
        count: 0
      });
    }

    // Excluir o pr√≥prio novo administrador da lista
    const destinatarios = administradores
      .filter(admin => admin.id_utilizador !== parseInt(id_admin))
      .map(admin => admin.id_utilizador);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Apenas o novo admin existe - nenhuma notifica√ß√£o necess√°ria');
      return res.status(200).json({
        success: true,
        message: "Nenhum outro administrador para notificar",
        count: 0
      });
    }

    // Criar e distribuir notifica√ß√£o de seguran√ßa
    const resultado = await criarEAssociarNotificacao(
      "üîê Novo Administrador Criado",
      `Um novo administrador foi adicionado ao sistema: ${nome_admin}. Verifica se esta altera√ß√£o foi autorizada.`,
      "admin_criado",
      id_admin,
      destinatarios
    );

    // Enviar notifica√ß√µes push em tempo real
    for (const idUtilizador of destinatarios) {
      await enviarPushNotification(
        req.io,
        idUtilizador,
        resultado.notificacao.titulo,
        resultado.notificacao.mensagem,
        resultado.notificacao.tipo,
        { id_admin, nome_admin }
      );
    }

    console.log(`‚úÖ [NOTIF] Notifica√ß√µes de seguran√ßa enviadas para ${resultado.associacoes.length} administradores`);
    return res.status(200).json({
      success: true,
      message: "Notifica√ß√µes de seguran√ßa enviadas com sucesso",
      count: resultado.associacoes.length
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao processar admin criado:', error.message);
    return res.status(500).json({
      success: false,
      message: "Erro ao enviar notifica√ß√µes de seguran√ßa",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Notifica altera√ß√£o de formador de curso
 * 
 * Informa todos os inscritos sobre mudan√ßas no formador
 * respons√°vel pelo curso.
 * 
 * @param {Object} req - Requisi√ß√£o com dados da altera√ß√£o
 * @param {Object} res - Resposta Express com resultado
 */
const formadorAlterado = async (req, res) => {
  try {
    const { 
      id_curso, nome_curso, 
      id_formador_antigo, nome_formador_antigo, 
      id_formador_novo, nome_formador_novo 
    } = req.body;

    if (!id_curso || !nome_curso) {
      console.warn('‚ö†Ô∏è [NOTIF] Dados insuficientes para notifica√ß√£o de formador alterado');
      return res.status(400).json({
        success: false,
        message: "ID e nome do curso s√£o obrigat√≥rios"
      });
    }

    console.log(`üë®‚Äçüè´ [NOTIF] A processar altera√ß√£o de formador no curso: ${nome_curso}`);

    // Procurar todos os inscritos ativos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: id_curso,
        estado: 'inscrito' // Apenas inscritos ativos
      },
      attributes: ['id_utilizador']
    });

    if (inscricoes.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Nenhum aluno inscrito para notificar sobre formador');
      return res.status(200).json({
        success: true,
        message: "Nenhum aluno inscrito para notificar",
        count: 0
      });
    }

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    // Construir mensagem detalhada sobre a altera√ß√£o
    let mensagem = `O formador do curso "${nome_curso}" foi alterado`;
    if (nome_formador_antigo && nome_formador_novo) {
      mensagem += ` de ${nome_formador_antigo} para ${nome_formador_novo}`;
    } else if (nome_formador_novo) {
      mensagem += ` para ${nome_formador_novo}`;
    } else if (nome_formador_antigo) {
      mensagem += `. O formador anterior era ${nome_formador_antigo}`;
    }
    mensagem += '. Consulta os detalhes do curso para mais informa√ß√µes.';

    const resultado = await criarEAssociarNotificacao(
      "üë®‚Äçüè´ Altera√ß√£o de Formador",
      mensagem,
      "formador_alterado",
      id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket
    for (const idUtilizador of destinatarios) {
      await enviarPushNotification(
        req.io,
        idUtilizador,
        resultado.notificacao.titulo,
        resultado.notificacao.mensagem,
        resultado.notificacao.tipo,
        { 
          id_curso, 
          nome_curso,
          formador_antigo: nome_formador_antigo,
          formador_novo: nome_formador_novo
        }
      );
    }

    console.log(`‚úÖ [NOTIF] Notifica√ß√µes de formador alterado enviadas para ${resultado.associacoes.length} inscritos`);
    return res.status(200).json({
      success: true,
      message: "Notifica√ß√µes de altera√ß√£o de formador enviadas com sucesso",
      count: resultado.associacoes.length
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao processar formador alterado:', error.message);
    return res.status(500).json({
      success: false,
      message: "Erro ao enviar notifica√ß√µes de formador",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Notifica altera√ß√£o cr√≠tica de datas de curso
 * 
 * Alerta todos os inscritos sobre mudan√ßas no cronograma,
 * permitindo reorganiza√ß√£o de agendas pessoais.
 * 
 * @param {Object} req - Requisi√ß√£o com dados das altera√ß√µes
 * @param {Object} res - Resposta Express com resultado
 */
const dataCursoAlterada = async (req, res) => {
  try {
    const { 
      id_curso, nome_curso, 
      data_inicio_antiga, data_fim_antiga, 
      data_inicio_nova, data_fim_nova 
    } = req.body;

    if (!id_curso || !nome_curso || (!data_inicio_nova && !data_fim_nova)) {
      console.warn('‚ö†Ô∏è [NOTIF] Dados insuficientes para notifica√ß√£o de data alterada');
      return res.status(400).json({
        success: false,
        message: "Dados incompletos para a notifica√ß√£o de datas"
      });
    }

    console.log(`üìÖ [NOTIF] A processar altera√ß√£o de datas do curso: ${nome_curso}`);

    // Procurar inscritos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: id_curso,
        estado: 'inscrito'
      },
      attributes: ['id_utilizador']
    });

    if (inscricoes.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Nenhum aluno inscrito para notificar sobre datas');
      return res.status(200).json({
        success: true,
        message: "Nenhum aluno inscrito para notificar",
        count: 0
      });
    }

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    // Construir detalhes leg√≠veis das altera√ß√µes
    let detalhesAlteracao = [];
    if (data_inicio_nova && data_inicio_antiga) {
      const dataInicioAntiga = new Date(data_inicio_antiga).toLocaleDateString('pt-PT');
      const dataInicioNova = new Date(data_inicio_nova).toLocaleDateString('pt-PT');
      detalhesAlteracao.push(`data de in√≠cio de ${dataInicioAntiga} para ${dataInicioNova}`);
    }
    if (data_fim_nova && data_fim_antiga) {
      const dataFimAntiga = new Date(data_fim_antiga).toLocaleDateString('pt-PT');
      const dataFimNova = new Date(data_fim_nova).toLocaleDateString('pt-PT');
      detalhesAlteracao.push(`data de fim de ${dataFimAntiga} para ${dataFimNova}`);
    }

    const mensagem = `As datas do curso "${nome_curso}" foram alteradas: ${detalhesAlteracao.join(' e ')}. Por favor, ajusta a tua agenda conforme necess√°rio.`;

    const resultado = await criarEAssociarNotificacao(
      "üìÖ Altera√ß√£o nas Datas do Curso",
      mensagem,
      "data_curso_alterada",
      id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket
    for (const idUtilizador of destinatarios) {
      await enviarPushNotification(
        req.io,
        idUtilizador,
        resultado.notificacao.titulo,
        resultado.notificacao.mensagem,
        resultado.notificacao.tipo,
        { 
          id_curso, 
          nome_curso,
          data_inicio_antiga,
          data_fim_antiga,
          data_inicio_nova,
          data_fim_nova
        }
      );
    }

    console.log(`‚úÖ [NOTIF] Notifica√ß√µes de data alterada enviadas para ${resultado.associacoes.length} inscritos`);
    return res.status(200).json({
      success: true,
      message: "Notifica√ß√µes de altera√ß√£o de datas enviadas com sucesso",
      count: resultado.associacoes.length
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao processar data alterada:', error.message);
    return res.status(500).json({
      success: false,
      message: "Erro ao enviar notifica√ß√µes de datas",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Notifica cria√ß√£o de novo curso
 * 
 * Informa utilizadores relevantes sobre disponibilidade
 * de novos conte√∫dos formativos.
 * 
 * @param {Object} req - Requisi√ß√£o com dados do novo curso
 * @param {Object} res - Resposta Express com resultado
 */
const cursoCriado = async (req, res) => {
  try {
    const { id_curso, nome_curso, id_categoria, id_area } = req.body;

    if (!id_curso || !nome_curso) {
      console.warn('‚ö†Ô∏è [NOTIF] Dados insuficientes para notifica√ß√£o de curso criado');
      return res.status(400).json({
        success: false,
        message: "ID e nome do curso s√£o obrigat√≥rios"
      });
    }

    console.log(`üìö [NOTIF] A processar cria√ß√£o de curso: ${nome_curso}`);

    // Estrat√©gia simplificada: notificar administradores e formadores
    const administradores = await User.findAll({
      where: { id_cargo: 1 }, // Cargo 1 = Administrador
      attributes: ['id_utilizador']
    });

    // Procurar formadores de forma simples
    let formadores = [];
    try {
      formadores = await User.findAll({
        where: { id_cargo: 2 }, // Cargo 2 = Formador
        attributes: ['id_utilizador']
      });
      console.log(`‚úì [NOTIF] ${formadores.length} formadores encontrados`);
    } catch (formadorError) {
      console.warn('‚ö†Ô∏è [NOTIF] Erro ao procurar formadores (continuando s√≥ com admins):', formadorError.message);
      formadores = [];
    }

    console.log(`‚úì [NOTIF] ${administradores.length} administradores encontrados`);

    // Combinar destinat√°rios evitando duplicatas
    const formadoresIds = formadores.map(f => f.id_utilizador);
    const adminsIds = administradores.map(a => a.id_utilizador);

    const destinatariosSet = new Set([...formadoresIds, ...adminsIds]);
    const destinatarios = Array.from(destinatariosSet);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Nenhum destinat√°rio encontrado para notifica√ß√£o de novo curso');
      return res.status(200).json({
        success: true,
        message: "Nenhum destinat√°rio encontrado",
        count: 0
      });
    }

    // Criar e distribuir notifica√ß√£o
    const resultado = await criarEAssociarNotificacao(
      "üìö Novo Curso Dispon√≠vel",
      `Um novo curso foi criado: "${nome_curso}". Consulta os detalhes e considera divulg√°-lo aos interessados.`,
      "curso_adicionado",
      id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket
    for (const idUtilizador of destinatarios) {
      await enviarPushNotification(
        req.io,
        idUtilizador,
        resultado.notificacao.titulo,
        resultado.notificacao.mensagem,
        resultado.notificacao.tipo,
        { id_curso, nome_curso, id_categoria, id_area }
      );
    }

    console.log(`‚úÖ [NOTIF] Notifica√ß√µes de novo curso enviadas para ${resultado.associacoes.length} utilizadores`);
    return res.status(200).json({
      success: true,
      message: `Notifica√ß√µes de novo curso enviadas com sucesso para ${resultado.associacoes.length} utilizadores`,
      count: resultado.associacoes.length
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao processar curso criado:', error.message);
    return res.status(500).json({
      success: false,
      message: "Erro ao enviar notifica√ß√µes de novo curso",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Notifica altera√ß√µes gerais do curso
 * 
 * Informa todos os inscritos sobre mudan√ßas nos dados como
 * nome, descri√ß√£o, tipo, dura√ß√£o, etc.
 * 
 * @param {Object} req - Requisi√ß√£o com dados das altera√ß√µes
 * @param {Object} res - Resposta Express com resultado
 */
const cursoAlterado = async (req, res) => {
  try {
    const { 
      id_curso, 
      nome_curso, 
      alteracoes
    } = req.body;

    if (!id_curso || !nome_curso || !alteracoes || alteracoes.length === 0) {
      console.warn('‚ö†Ô∏è [NOTIF] Dados insuficientes para notifica√ß√£o de curso alterado');
      return res.status(400).json({
        success: false,
        message: "Dados incompletos para a notifica√ß√£o de altera√ß√µes"
      });
    }

    console.log(`‚úèÔ∏è [NOTIF] A processar altera√ß√µes do curso: ${nome_curso} (${alteracoes.length} altera√ß√µes)`);

    // Procurar inscritos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: id_curso,
        estado: 'inscrito'
      },
      attributes: ['id_utilizador']
    });

    if (inscricoes.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF] Nenhum aluno inscrito para notificar sobre altera√ß√µes');
      return res.status(200).json({
        success: true,
        message: "Nenhum aluno inscrito para notificar",
        count: 0
      });
    }

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    // Construir mensagem detalhada das altera√ß√µes
    const detalhesAlteracoes = alteracoes.map(alt => {
      const nomesCampos = {
        nome: 'nome',
        descricao: 'descri√ß√£o', 
        tipo: 'tipo',
        vagas: 'n√∫mero de vagas',
        duracao: 'dura√ß√£o',
        id_area: '√°rea',
        id_categoria: 'categoria',
        id_topico_area: 't√≥pico'
      };

      const nomeCampo = nomesCampos[alt.campo] || alt.campo;
      
      // Formata√ß√£o especial para tipos de curso
      if (alt.campo === 'tipo') {
        const tipos = { sincrono: 'S√≠ncrono', assincrono: 'Ass√≠ncrono' };
        return `${nomeCampo} alterado de "${tipos[alt.valor_antigo] || alt.valor_antigo}" para "${tipos[alt.valor_novo] || alt.valor_novo}"`;
      }
      
      return `${nomeCampo} alterado de "${alt.valor_antigo}" para "${alt.valor_novo}"`;
    });

    const mensagem = `O curso "${nome_curso}" foi atualizado. Altera√ß√µes: ${detalhesAlteracoes.join('; ')}. Consulta os detalhes do curso para mais informa√ß√µes.`;

    const resultado = await criarEAssociarNotificacao(
      "‚úèÔ∏è Curso Atualizado",
      mensagem,
      "curso_alterado",
      id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket
    for (const idUtilizador of destinatarios) {
      await enviarPushNotification(
        req.io,
        idUtilizador,
        resultado.notificacao.titulo,
        resultado.notificacao.mensagem,
        resultado.notificacao.tipo,
        { id_curso, nome_curso, alteracoes }
      );
    }

    console.log(`‚úÖ [NOTIF] Notifica√ß√µes de curso alterado enviadas para ${resultado.associacoes.length} inscritos`);
    return res.status(200).json({
      success: true,
      message: "Notifica√ß√µes de altera√ß√£o do curso enviadas com sucesso",
      count: resultado.associacoes.length
    });
  } catch (error) {
    console.error('‚ùå [NOTIF] Erro ao processar curso alterado:', error.message);
    return res.status(500).json({
      success: false,
      message: "Erro ao enviar notifica√ß√µes de altera√ß√µes",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Vers√£o interna para notificar novo curso
 * Fun√ß√£o utilizada por outros controladores para envio autom√°tico
 * 
 * @param {Object} curso - Dados do curso criado
 * @param {Object} io - Inst√¢ncia WebSocket opcional
 * @returns {Promise<Object|null>} Resultado ou null se erro
 */
const notificarNovoCurso = async (curso, io = null) => {
  try {
    console.log(`üìö [NOTIF-INT] A processar notifica√ß√£o interna de novo curso: ${curso.nome}`);
    
    // Procurar administradores
    const administradores = await User.findAll({
      where: { id_cargo: 1 },
      attributes: ['id_utilizador']
    });

    // Procurar formadores
    let formadores = [];
    try {
      formadores = await User.findAll({
        where: { id_cargo: 2 },
        attributes: ['id_utilizador']
      });
      console.log(`‚úì [NOTIF-INT] ${formadores.length} formadores encontrados`);
    } catch (error) {
      console.warn('‚ö†Ô∏è [NOTIF-INT] Erro ao procurar formadores (continuando):', error.message);
      formadores = [];
    }

    console.log(`‚úì [NOTIF-INT] ${administradores.length} administradores encontrados`);

    // Combinar destinat√°rios √∫nicos
    const formadoresIds = formadores.map(f => f.id_utilizador);
    const adminsIds = administradores.map(a => a.id_utilizador);
    const destinatariosSet = new Set([...formadoresIds, ...adminsIds]);
    const destinatarios = Array.from(destinatariosSet);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhum destinat√°rio encontrado para novo curso interno');
      return null;
    }

    // Criar e distribuir notifica√ß√£o
    const resultado = await criarEAssociarNotificacao(
      "üìö Novo Curso Dispon√≠vel",
      `Um novo curso foi criado: "${curso.nome}". Consulta os detalhes na plataforma.`,
      "curso_adicionado",
      curso.id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket se dispon√≠vel
    if (io) {
      for (const idUtilizador of destinatarios) {
        await enviarPushNotification(
          io,
          idUtilizador,
          resultado.notificacao.titulo,
          resultado.notificacao.mensagem,
          resultado.notificacao.tipo,
          { id_curso: curso.id_curso, nome_curso: curso.nome }
        );
      }
    }

    console.log(`‚úÖ [NOTIF-INT] Notifica√ß√£o interna de novo curso processada para ${resultado.associacoes.length} utilizadores`);
    return resultado;
  } catch (error) {
    console.error('‚ùå [NOTIF-INT] Erro na notifica√ß√£o interna de novo curso:', error.message);
    return null;
  }
};

/**
 * Vers√£o interna para notificar altera√ß√£o de formador
 * 
 * @param {Object} curso - Dados do curso
 * @param {Object} formadorAntigo - Dados do formador anterior
 * @param {Object} formadorNovo - Dados do novo formador
 * @param {Object} io - Inst√¢ncia WebSocket opcional
 * @returns {Promise<Object|null>} Resultado ou null se erro
 */
const notificarFormadorAlterado = async (curso, formadorAntigo, formadorNovo, io = null) => {
  try {
    console.log(`üë®‚Äçüè´ [NOTIF-INT] A processar altera√ß√£o de formador interno: ${curso.nome}`);
    
    // Procurar inscritos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: curso.id_curso,
        estado: 'inscrito'
      },
      attributes: ['id_utilizador']
    });

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhum inscrito para notificar sobre formador alterado');
      return null;
    }

    // Criar mensagem sobre a altera√ß√£o
    let mensagem = `O formador do curso "${curso.nome}" foi alterado`;
    if (formadorAntigo && formadorNovo) {
      mensagem += ` de ${formadorAntigo.nome} para ${formadorNovo.nome}`;
    } else if (formadorNovo) {
      mensagem += ` para ${formadorNovo.nome}`;
    }
    mensagem += '. Consulta os detalhes do curso para mais informa√ß√µes.';

    const resultado = await criarEAssociarNotificacao(
      "üë®‚Äçüè´ Altera√ß√£o de Formador",
      mensagem,
      "formador_alterado",
      curso.id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket se dispon√≠vel
    if (io) {
      for (const idUtilizador of destinatarios) {
        await enviarPushNotification(
          io,
          idUtilizador,
          resultado.notificacao.titulo,
          resultado.notificacao.mensagem,
          resultado.notificacao.tipo,
          { id_curso: curso.id_curso }
        );
      }
    }

    console.log(`‚úÖ [NOTIF-INT] Notifica√ß√£o interna de formador alterado processada para ${resultado.associacoes.length} inscritos`);
    return resultado;
  } catch (error) {
    console.error('‚ùå [NOTIF-INT] Erro na notifica√ß√£o interna de formador alterado:', error.message);
    return null;
  }
};

/**
 * Vers√£o interna para notificar altera√ß√£o de datas
 * 
 * @param {Object} curso - Dados do curso atualizado
 * @param {Date} dataInicioAntiga - Data de in√≠cio anterior
 * @param {Date} dataFimAntiga - Data de fim anterior
 * @param {Object} io - Inst√¢ncia WebSocket opcional
 * @returns {Promise<Object|null>} Resultado ou null se erro
 */
const notificarDataCursoAlterada = async (curso, dataInicioAntiga, dataFimAntiga, io = null) => {
  try {
    console.log(`üìÖ [NOTIF-INT] A processar altera√ß√£o de datas interno: ${curso.nome}`);
    
    // Procurar inscritos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: curso.id_curso,
        estado: 'inscrito'
      },
      attributes: ['id_utilizador']
    });

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhum inscrito para notificar sobre datas alteradas');
      return null;
    }

    // Verificar se houve altera√ß√µes significativas
    let detalhesAlteracao = [];
    if (dataInicioAntiga && curso.data_inicio &&
      new Date(dataInicioAntiga).getTime() !== new Date(curso.data_inicio).getTime()) {
      const dataInicioAntigaFormatada = new Date(dataInicioAntiga).toLocaleDateString('pt-PT');
      const dataInicioNovaFormatada = new Date(curso.data_inicio).toLocaleDateString('pt-PT');
      detalhesAlteracao.push(`data de in√≠cio de ${dataInicioAntigaFormatada} para ${dataInicioNovaFormatada}`);
    }

    if (dataFimAntiga && curso.data_fim &&
      new Date(dataFimAntiga).getTime() !== new Date(curso.data_fim).getTime()) {
      const dataFimAntigaFormatada = new Date(dataFimAntiga).toLocaleDateString('pt-PT');
      const dataFimNovaFormatada = new Date(curso.data_fim).toLocaleDateString('pt-PT');
      detalhesAlteracao.push(`data de fim de ${dataFimAntigaFormatada} para ${dataFimNovaFormatada}`);
    }

    if (detalhesAlteracao.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhuma altera√ß√£o significativa de datas detetada');
      return null;
    }

    const mensagem = `As datas do curso "${curso.nome}" foram alteradas: ${detalhesAlteracao.join(' e ')}. Ajusta a tua agenda conforme necess√°rio.`;

    const resultado = await criarEAssociarNotificacao(
      "üìÖ Altera√ß√£o nas Datas do Curso",
      mensagem,
      "data_curso_alterada",
      curso.id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket se dispon√≠vel
    if (io) {
      for (const idUtilizador of destinatarios) {
        await enviarPushNotification(
          io,
          idUtilizador,
          resultado.notificacao.titulo,
          resultado.notificacao.mensagem,
          resultado.notificacao.tipo,
          { id_curso: curso.id_curso }
        );
      }
    }

    console.log(`‚úÖ [NOTIF-INT] Notifica√ß√£o interna de datas alteradas processada para ${resultado.associacoes.length} inscritos`);
    return resultado;
  } catch (error) {
    console.error('‚ùå [NOTIF-INT] Erro na notifica√ß√£o interna de datas alteradas:', error.message);
    return null;
  }
};

/**
 * Vers√£o interna para notificar altera√ß√µes do curso
 * 
 * @param {Object} curso - Dados do curso atualizado
 * @param {Array} alteracoes - Lista de altera√ß√µes realizadas
 * @param {Object} io - Inst√¢ncia WebSocket opcional
 * @returns {Promise<Object|null>} Resultado ou null se erro
 */
const notificarCursoAlterado = async (curso, alteracoes, io = null) => {
  try {
    if (!alteracoes || alteracoes.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhuma altera√ß√£o para notificar');
      return null;
    }

    console.log(`‚úèÔ∏è [NOTIF-INT] A processar altera√ß√µes internas do curso: ${curso.nome} (${alteracoes.length} altera√ß√µes)`);

    // Procurar inscritos no curso
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_curso: curso.id_curso,
        estado: 'inscrito'
      },
      attributes: ['id_utilizador']
    });

    const destinatarios = inscricoes.map(inscricao => inscricao.id_utilizador);

    if (destinatarios.length === 0) {
      console.log('‚ÑπÔ∏è [NOTIF-INT] Nenhum inscrito para notificar sobre altera√ß√µes');
      return null;
    }

    // Construir mensagem detalhada das altera√ß√µes
    const detalhesAlteracoes = alteracoes.map(alt => {
      const nomesCampos = {
        nome: 'nome',
        descricao: 'descri√ß√£o', 
        tipo: 'tipo',
        vagas: 'n√∫mero de vagas',
        duracao: 'dura√ß√£o',
        id_area: '√°rea',
        id_categoria: 'categoria',
        id_topico_area: 't√≥pico'
      };

      const nomeCampo = nomesCampos[alt.campo] || alt.campo;
      
      if (alt.campo === 'tipo') {
        const tipos = { sincrono: 'S√≠ncrono', assincrono: 'Ass√≠ncrono' };
        return `${nomeCampo} alterado de "${tipos[alt.valor_antigo] || alt.valor_antigo}" para "${tipos[alt.valor_novo] || alt.valor_novo}"`;
      }
      
      return `${nomeCampo} alterado de "${alt.valor_antigo}" para "${alt.valor_novo}"`;
    });

    const mensagem = `O curso "${curso.nome}" foi atualizado. Altera√ß√µes: ${detalhesAlteracoes.join('; ')}. Consulta os detalhes do curso.`;

    const resultado = await criarEAssociarNotificacao(
      "‚úèÔ∏è Curso Atualizado", 
      mensagem,
      "curso_alterado",
      curso.id_curso,
      destinatarios
    );

    // Enviar notifica√ß√µes push via WebSocket se dispon√≠vel
    if (io) {
      for (const idUtilizador of destinatarios) {
        await enviarPushNotification(
          io,
          idUtilizador,
          resultado.notificacao.titulo,
          resultado.notificacao.mensagem,
          resultado.notificacao.tipo,
          { id_curso: curso.id_curso, alteracoes }
        );
      }
    }

    console.log(`‚úÖ [NOTIF-INT] Notifica√ß√£o interna de curso alterado processada para ${resultado.associacoes.length} inscritos`);
    return resultado;
  } catch (error) {
    console.error('‚ùå [NOTIF-INT] Erro na notifica√ß√£o interna de curso alterado:', error.message);
    return null;
  }
};

module.exports = {
  // Fun√ß√µes para rotas HTTP p√∫blicas
  getNotificacoesUtilizador,
  marcarComoLida,
  marcarTodasComoLidas,
  getNotificacoesNaoLidasContagem,
  adminCriado,
  formadorAlterado,
  dataCursoAlterada,
  cursoCriado,
  cursoAlterado,
  
  // Fun√ß√µes internas para integra√ß√£o com outros controladores
  notificarNovoCurso,
  notificarFormadorAlterado,
  notificarDataCursoAlterada,
  notificarCursoAlterado
};