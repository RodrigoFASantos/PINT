const User = require("../../database/models/User");
const Categoria = require("../../database/models/Categoria");
const Area = require("../../database/models/Area");
const Topico_Area = require("../../database/models/Topico_Area");
const Curso = require("../../database/models/Curso");
const Inscricao_Curso = require("../../database/models/Inscricao_Curso");
const Curso_Topicos = require("../../database/models/Curso_Topicos");
const PastaCurso = require("../../database/models/PastaCurso");
const ConteudoCurso = require("../../database/models/ConteudoCurso");
const AssociarCursos = require("../../database/models/AssociarCurso");
const uploadUtils = require('../../middleware/upload');
const { sequelize } = require("../../config/db");
const { Op } = require('sequelize');
const fs = require('fs');
const path = require('path');

// Importar controlador de notifica√ß√µes para envio autom√°tico
const notificacaoController = require('../notificacoes/notificacoes_ctrl');

/**
 * Controlador completo para gest√£o do sistema de cursos
 * 
 * Este m√≥dulo centraliza todas as opera√ß√µes relacionadas com cursos na plataforma:
 * - Cria√ß√£o, edi√ß√£o e elimina√ß√£o de cursos
 * - Consulta e listagem com filtros avan√ßados
 * - Gest√£o de t√≥picos organizacionais
 * - Sistema integrado de notifica√ß√µes via WebSocket
 * 
 * Suporta dois tipos de cursos:
 * - S√≠ncronos: com formador definido e vagas limitadas
 * - Ass√≠ncronos: para autoestudo, sem formador nem limite de vagas
 */

// =============================================================================
// LISTAGEM E CONSULTA DE CURSOS
// =============================================================================

/**
 * Obt√©m lista paginada de cursos com filtros avan√ßados
 * 
 * Esta fun√ß√£o serve a p√°gina principal de cursos com capacidades de pesquisa
 * e filtro. Suporta pagina√ß√£o para grandes volumes de dados e m√∫ltiplos
 * crit√©rios de filtro simultaneamente.
 * 
 * Filtros dispon√≠veis:
 * - categoria: ID da categoria espec√≠fica
 * - area: ID da √°rea de forma√ß√£o
 * - formador: ID do formador respons√°vel
 * - search: pesquisa textual no nome do curso
 * - tipo: sincrono ou assincrono
 * - estado: planeado, em_curso, terminado
 * - ativo: boolean para cursos ativos/inativos
 * - vagas: n√∫mero m√≠nimo de vagas dispon√≠veis
 * - topico: ID do t√≥pico de √°rea
 * 
 * @param {Object} req - Requisi√ß√£o Express com query parameters para filtros
 * @param {Object} res - Resposta Express com lista paginada de cursos
 */
const getAllCursos = async (req, res) => {
  try {
    console.log('üìö [CURSOS] A processar listagem de cursos');
    
    // Extrair par√¢metros de pagina√ß√£o com valores padr√£o sensatos
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    // Extrair todos os par√¢metros de filtro da query string
    const { categoria, area, formador, search, tipo, estado, ativo, vagas, topico } = req.query;

    console.log('üîç [CURSOS] Filtros aplicados:', { categoria, area, formador, search, tipo, estado, ativo, vagas, topico });

    // Construir objeto de condi√ß√µes WHERE de forma din√¢mica
    const where = {};

    // Aplicar filtros num√©ricos se fornecidos
    if (categoria) {
      where.id_categoria = parseInt(categoria, 10);
    }
    if (area) {
      where.id_area = parseInt(area, 10);
    }
    if (formador) {
      where.id_formador = parseInt(formador, 10);
    }
    if (topico) {
      where.id_topico_area = parseInt(topico, 10);
    }

    // Filtro de pesquisa textual insens√≠vel a mai√∫sculas/min√∫sculas
    if (search) {
      where.nome = { [Op.iLike]: `%${search}%` };
    }

    // Filtros de texto e estado
    if (tipo) {
      where.tipo = tipo;
    }
    if (estado) {
      where.estado = estado;
    }

    // Filtro boolean para estado ativo/inativo
    if (ativo !== undefined) {
      where.ativo = ativo === 'false' ? false : true;
    }

    // Filtro de vagas m√≠nimas (√∫til para procurar cursos com lugares)
    if (vagas) {
      where.vagas = { [Op.gte]: parseInt(vagas, 10) };
    }

    // Definir modelos relacionados a incluir na consulta
    const includeModels = [
      {
        model: User,
        as: "formador",
        attributes: ['id_utilizador', 'nome', 'email'],
        required: false // LEFT JOIN para incluir cursos sem formador
      },
      {
        model: Area,
        as: "area",
        required: false
      },
      {
        model: Categoria,
        as: "categoria",
        required: false
      }
    ];

    // Adicionar Topico_Area se o modelo estiver dispon√≠vel
    try {
      if (Topico_Area) {
        includeModels.push({
          model: Topico_Area,
          as: "Topico_Area",
          required: false
        });
      }
    } catch (err) {
      console.warn('‚ö†Ô∏è [CURSOS] Modelo Topico_Area n√£o dispon√≠vel:', err.message);
    }

    // Executar consulta principal com contagem total para pagina√ß√£o
    const { count, rows } = await Curso.findAndCountAll({
      where,
      offset,
      limit,
      order: [['data_inicio', 'DESC']], // Mostrar cursos mais recentes primeiro
      include: includeModels
    });

    // Fallback para debugging: se n√£o h√° resultados, tentar consulta b√°sica
    if (rows.length === 0 && Object.keys(where).length === 0) {
      console.log('‚ÑπÔ∏è [CURSOS] Nenhum resultado - a tentar consulta b√°sica para debug');
      
      const todosOsCursos = await Curso.findAndCountAll({
        limit,
        offset,
        order: [['data_inicio', 'DESC']],
        include: includeModels
      });
      
      console.log(`‚úÖ [CURSOS] ${todosOsCursos.count} cursos encontrados (consulta b√°sica)`);
      return res.json({
        cursos: todosOsCursos.rows,
        total: todosOsCursos.count,
        totalPages: Math.ceil(todosOsCursos.count / limit),
        currentPage: page
      });
    }

    console.log(`‚úÖ [CURSOS] ${count} cursos encontrados com filtros aplicados`);
    res.json({
      cursos: rows,
      total: count,
      totalPages: Math.ceil(count / limit),
      currentPage: page
    });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao listar cursos:', error.message);
    res.status(500).json({ 
      message: "Erro ao procurar cursos",
      detalhes: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Obt√©m cursos filtrados por categorias espec√≠ficas
 * 
 * Fun√ß√£o especializada para listar cursos que pertencem a uma ou mais
 * categorias espec√≠ficas. Muito utilizada em integra√ß√µes com sistemas
 * de gest√£o de formadores e para construir listagens tem√°ticas.
 * 
 * @param {Object} req - Requisi√ß√£o com IDs de categorias separados por v√≠rgula
 * @param {Object} res - Resposta Express com cursos das categorias
 */
const getCursosByCategoria = async (req, res) => {
  try {
    const { categorias } = req.query;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    if (!categorias) {
      console.warn('‚ö†Ô∏è [CURSOS] Par√¢metro "categorias" em falta na query string');
      return res.status(400).json({ message: "√â necess√°rio fornecer pelo menos uma categoria" });
    }

    // Converter string "1,2,3" para array de inteiros [1, 2, 3]
    const categoriaIds = categorias.split(',').map(id => parseInt(id.trim()));
    console.log(`üè∑Ô∏è [CURSOS] A filtrar por categorias:`, categoriaIds);

    const { count, rows } = await Curso.findAndCountAll({
      where: {
        id_categoria: { [Op.in]: categoriaIds }
      },
      include: [
        {
          model: Categoria,
          as: "categoria",
          required: false
        },
        {
          model: Area,
          as: "area",
          required: false
        }
      ],
      offset,
      limit,
      order: [['nome', 'ASC']] // Ordenar alfabeticamente para facilitar navega√ß√£o
    });

    console.log(`‚úÖ [CURSOS] ${count} cursos encontrados para as categorias especificadas`);
    res.json({
      cursos: rows,
      total: count,
      totalPages: Math.ceil(count / limit),
      currentPage: page
    });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao filtrar por categoria:', error.message);
    res.status(500).json({ 
      message: "Erro ao procurar cursos por categoria",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Obt√©m detalhes completos de um curso espec√≠fico
 * 
 * Fun√ß√£o principal para visualiza√ß√£o de curso individual. Carrega todas
 * as informa√ß√µes relacionadas e aplica regras de neg√≥cio espec√≠ficas:
 * - Verifica se o curso j√° terminou
 * - Para cursos terminados, apenas alunos inscritos podem ver detalhes
 * - Conta inscri√ß√µes ativas para mostrar ocupa√ß√£o
 * - Carrega cursos associados para recomenda√ß√µes
 * 
 * @param {Object} req - Requisi√ß√£o com ID do curso nos par√¢metros
 * @param {Object} res - Resposta Express com detalhes completos do curso
 */
const getCursoById = async (req, res) => {
  try {
    const id = req.params.id;
    const userId = req.user?.id_utilizador;

    console.log(`üìñ [CURSOS] A carregar detalhes do curso ${id} para utilizador ${userId || 'an√≥nimo'}`);

    // Buscar curso com todas as rela√ß√µes necess√°rias para vista completa
    const curso = await Curso.findByPk(id, {
      include: [
        {
          model: User,
          as: "formador",
          attributes: ['id_utilizador', 'nome', 'email'],
          required: false
        },
        {
          model: Area,
          as: "area",
          required: false
        },
        {
          model: Categoria,
          as: "categoria",
          required: false
        },
        {
          model: Curso_Topicos,
          as: "topicos",
          where: { ativo: true },
          required: false,
          order: [['ordem', 'ASC']]
        },
        {
          model: Topico_Area,
          as: "Topico_Area",
          required: false
        }
      ]
    });

    if (!curso) {
      console.warn(`‚ö†Ô∏è [CURSOS] Curso ${id} n√£o encontrado na base de dados`);
      return res.status(404).json({ message: "Curso n√£o encontrado!" });
    }

    // Preparar objeto de resposta com dados base do curso
    const cursoComDetalhes = curso.toJSON();

    // Verificar se o curso j√° terminou comparando datas
    const dataAtual = new Date();
    const dataFimCurso = new Date(curso.data_fim);
    const cursoTerminado = dataFimCurso < dataAtual;

    cursoComDetalhes.terminado = cursoTerminado;

    // Aplicar regras de acesso para cursos terminados
    if (cursoTerminado && userId) {
      try {
        const inscricao = await Inscricao_Curso.findOne({
          where: {
            id_utilizador: userId,
            id_curso: id,
            estado: 'inscrito'
          }
        });

        cursoComDetalhes.acessoPermitido = !!inscricao;
        console.log(`üîê [CURSOS] Acesso para curso terminado: ${!!inscricao ? 'permitido' : 'negado'}`);
      } catch (error) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao verificar permiss√µes de acesso:', error.message);
        cursoComDetalhes.acessoPermitido = false;
      }
    } else if (cursoTerminado) {
      cursoComDetalhes.acessoPermitido = false;
    } else {
      cursoComDetalhes.acessoPermitido = true;
    }

    // Contar inscri√ß√µes ativas para cursos s√≠ncronos (mostrar ocupa√ß√£o)
    try {
      if (curso.tipo === 'sincrono' && curso.vagas) {
        let whereInscricoes = { id_curso: id };

        // Tentar determinar o campo correto para estado das inscri√ß√µes
        try {
          const inscricaoAmostra = await Inscricao_Curso.findOne({ where: { id_curso: id } });
          if (inscricaoAmostra) {
            if ('ativo' in inscricaoAmostra.dataValues) {
              whereInscricoes.ativo = true;
            } else if ('status' in inscricaoAmostra.dataValues) {
              whereInscricoes.status = 'ativo';
            } else if ('estado' in inscricaoAmostra.dataValues) {
              whereInscricoes.estado = 'inscrito';
            }
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è [CURSOS] N√£o foi poss√≠vel determinar campo de estado das inscri√ß√µes');
        }

        const inscricoesAtivas = await Inscricao_Curso.count({ where: whereInscricoes });
        cursoComDetalhes.inscricoesAtivas = inscricoesAtivas;
        console.log(`üë• [CURSOS] ${inscricoesAtivas} inscri√ß√µes ativas encontradas`);
      }
    } catch (inscricoesError) {
      console.warn('‚ö†Ô∏è [CURSOS] Erro ao contar inscri√ß√µes:', inscricoesError.message);
      cursoComDetalhes.inscricoesAtivas = 0;
    }

    // Carregar cursos associados para sugest√µes e navega√ß√£o relacionada
    try {
      const associacoes = await AssociarCursos.findAll({
        where: {
          [Op.or]: [
            { id_curso_origem: id },
            { id_curso_destino: id }
          ]
        },
        include: [
          {
            model: Curso,
            as: 'cursoOrigem',
            attributes: ['id_curso', 'nome', 'descricao', 'imagem_path', 'tipo', 'estado'],
            required: false
          },
          {
            model: Curso,
            as: 'cursoDestino',
            attributes: ['id_curso', 'nome', 'descricao', 'imagem_path', 'tipo', 'estado'],
            required: false
          }
        ]
      });

      cursoComDetalhes.cursosAssociados = associacoes;
      console.log(`üîó [CURSOS] ${associacoes.length} associa√ß√µes de cursos encontradas`);
    } catch (associacoesError) {
      console.warn('‚ö†Ô∏è [CURSOS] Erro ao carregar associa√ß√µes:', associacoesError.message);
      cursoComDetalhes.cursosAssociados = [];
    }

    console.log(`‚úÖ [CURSOS] Detalhes do curso ${id} carregados com sucesso`);
    res.json(cursoComDetalhes);
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao carregar curso:', error.message);
    res.status(500).json({ 
      message: "Erro ao procurar curso", 
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Busca t√≥pico de √°rea espec√≠fico por identificador
 * 
 * Fun√ß√£o auxiliar utilizada principalmente em formul√°rios para validar
 * e obter informa√ß√µes sobre t√≥picos de √°rea dispon√≠veis.
 * 
 * @param {Object} req - Requisi√ß√£o com ID do t√≥pico nos par√¢metros
 * @param {Object} res - Resposta Express com dados do t√≥pico
 */
const getTopicoArea = async (req, res) => {
  try {
    const id = req.params.id;
    console.log(`üîç [CURSOS] A procurar t√≥pico de √°rea ${id}`);

    const topico = await Topico_Area.findByPk(id);

    if (!topico) {
      console.warn(`‚ö†Ô∏è [CURSOS] T√≥pico de √°rea ${id} n√£o encontrado`);
      return res.status(404).json({ message: "T√≥pico de √°rea n√£o encontrado" });
    }

    console.log(`‚úÖ [CURSOS] T√≥pico de √°rea ${id} encontrado: ${topico.titulo}`);
    res.json(topico);
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao buscar t√≥pico de √°rea:', error.message);
    res.status(500).json({ 
      message: "Erro ao buscar t√≥pico de √°rea", 
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

// =============================================================================
// CRIA√á√ÉO E EDI√á√ÉO DE CURSOS
// =============================================================================

/**
 * Cria novo curso no sistema
 * 
 * Fun√ß√£o principal para cria√ß√£o de cursos. Executa o fluxo completo:
 * 1. Valida√ß√£o rigorosa de todos os campos obrigat√≥rios
 * 2. Verifica√ß√£o de unicidade do nome do curso
 * 3. Cria√ß√£o da estrutura de diret√≥rios no sistema de ficheiros
 * 4. Processamento e armazenamento de imagem de capa
 * 5. Cria√ß√£o do registo na base de dados dentro de transa√ß√£o
 * 6. Auto-inscri√ß√£o do formador (para cursos s√≠ncronos)
 * 7. Envio de notifica√ß√µes autom√°ticas via WebSocket
 * 
 * @param {Object} req - Requisi√ß√£o Express com dados do curso e ficheiro opcional
 * @param {Object} res - Resposta Express com confirma√ß√£o e ID do curso criado
 */
const createCurso = async (req, res) => {
  try {
    console.log('üÜï [CURSOS] A iniciar cria√ß√£o de novo curso');
    console.log('üìã [CURSOS] Dados recebidos:', req.body);
    
    const {
      nome, descricao, tipo, vagas, duracao, data_inicio, data_fim,
      id_formador, id_area, id_categoria, topicos, id_topico_categoria
    } = req.body;

    // === VALIDA√á√ïES OBRIGAT√ìRIAS ===
    if (!nome || !tipo || !data_inicio || !data_fim || !id_area || !id_categoria || !duracao) {
      console.warn('‚ö†Ô∏è [CURSOS] Campos obrigat√≥rios em falta na requisi√ß√£o');
      return res.status(400).json({ message: "Campos obrigat√≥rios em falta!" });
    }

    if (!id_topico_categoria) {
      console.warn('‚ö†Ô∏è [CURSOS] T√≥pico n√£o selecionado');
      return res.status(400).json({ message: "√â necess√°rio selecionar um t√≥pico para o curso!" });
    }

    // Valida√ß√µes espec√≠ficas para cursos s√≠ncronos (requerem formador e vagas)
    if (tipo === 'sincrono') {
      if (!id_formador) {
        console.warn('‚ö†Ô∏è [CURSOS] Formador obrigat√≥rio para curso s√≠ncrono');
        return res.status(400).json({ message: "√â obrigat√≥rio selecionar um formador para cursos s√≠ncronos!" });
      }
      if (!vagas || parseInt(vagas, 10) <= 0) {
        console.warn('‚ö†Ô∏è [CURSOS] Vagas obrigat√≥rias para curso s√≠ncrono');
        return res.status(400).json({ message: "√â necess√°rio definir um n√∫mero v√°lido de vagas para cursos s√≠ncronos!" });
      }
    }

    // Verificar se j√° existe um curso com o mesmo nome
    const cursoExistente = await Curso.findOne({ where: { nome } });
    if (cursoExistente) {
      console.warn('‚ö†Ô∏è [CURSOS] Tentativa de criar curso com nome duplicado:', nome);
      return res.status(400).json({
        message: "J√° existe um curso com este nome. Por favor, escolhe um nome diferente.",
        error: "NOME_DUPLICADO"
      });
    }

    // === CRIA√á√ÉO DA ESTRUTURA DE DIRET√ìRIOS ===
    const cursoSlug = uploadUtils.normalizarNome(nome);
    const cursoDir = path.join(uploadUtils.BASE_UPLOAD_DIR, 'cursos', cursoSlug);
    uploadUtils.ensureDir(cursoDir);
    const dirPath = `uploads/cursos/${cursoSlug}`;

    console.log(`üìÅ [CURSOS] Diret√≥rio criado: ${dirPath}`);

    // Processar imagem de capa se foi enviada
    let imagemPath = null;
    if (req.file) {
      imagemPath = `${dirPath}/capa.png`;
      console.log(`üñºÔ∏è [CURSOS] Imagem de capa processada: ${imagemPath}`);
    }

    // === TRANSA√á√ÉO PARA GARANTIR CONSIST√äNCIA ===
    const t = await sequelize.transaction();

    try {
      // Determinar n√∫mero de vagas baseado no tipo do curso
      let vagasFinais = null;
      if (tipo === 'sincrono') {
        vagasFinais = parseInt(vagas, 10);
      }
      // Cursos ass√≠ncronos n√£o t√™m limite de vagas

      // Preparar dados para cria√ß√£o do curso
      const dadosCurso = {
        nome,
        descricao,
        tipo,
        vagas: vagasFinais,
        data_inicio,
        data_fim,
        id_formador: tipo === 'sincrono' ? id_formador : null,
        id_area,
        id_categoria,
        id_topico_area: id_topico_categoria,
        imagem_path: imagemPath,
        dir_path: dirPath,
        duracao: parseInt(duracao, 10),
        ativo: true
      };

      // Criar o curso principal na base de dados
      const novoCurso = await Curso.create(dadosCurso, { transaction: t });
      console.log(`‚úÖ [CURSOS] Curso criado com ID ${novoCurso.id_curso}`);

      // Criar t√≥picos organizacionais adicionais se fornecidos
      if (topicos && Array.isArray(topicos) && topicos.length > 0) {
        console.log(`üìù [CURSOS] A criar ${topicos.length} t√≥picos organizacionais adicionais`);
        
        for (let i = 0; i < topicos.length; i++) {
          await Curso_Topicos.create({
            nome: topicos[i].nome,
            id_curso: novoCurso.id_curso,
            ordem: i + 1,
            ativo: true
          }, { transaction: t });
        }
      }

      // Confirmar toda a transa√ß√£o
      await t.commit();
      console.log('‚úÖ [CURSOS] Transa√ß√£o de cria√ß√£o confirmada com sucesso');

      // === P√ìS-PROCESSAMENTO (FORA DA TRANSA√á√ÉO) ===

      // Auto-inscrever formador em cursos s√≠ncronos
      if (tipo === "sincrono" && id_formador) {
        try {
          await Inscricao_Curso.create({
            id_utilizador: id_formador,
            id_curso: novoCurso.id_curso,
            data_inscricao: new Date(),
            estado: "inscrito"
          });
          console.log('üë®‚Äçüè´ [CURSOS] Formador auto-inscrito no curso com sucesso');
        } catch (enrollError) {
          console.warn('‚ö†Ô∏è [CURSOS] Erro na auto-inscri√ß√£o do formador (n√£o cr√≠tico):', enrollError.message);
        }
      }

      // === ENVIO DE NOTIFICA√á√ïES VIA WEBSOCKET ===
      try {
        console.log('üì¢ [CURSOS] A processar notifica√ß√µes sobre novo curso...');
        
        // Verificar se WebSocket est√° dispon√≠vel
        if (!req.io) {
          console.warn('‚ö†Ô∏è [CURSOS] WebSocket n√£o dispon√≠vel - notifica√ß√µes podem falhar');
        }

        // Chamar fun√ß√£o de notifica√ß√£o corrigida
        const resultadoNotificacao = await notificacaoController.notificarNovoCurso(novoCurso, req.io);
        
        if (resultadoNotificacao) {
          console.log(`‚úÖ [CURSOS] ${resultadoNotificacao.associacoes.length} notifica√ß√µes de novo curso enviadas`);
        } else {
          console.log('‚ÑπÔ∏è [CURSOS] Nenhuma notifica√ß√£o enviada (sem destinat√°rios v√°lidos)');
        }
      } catch (notificationError) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao enviar notifica√ß√µes (n√£o cr√≠tico):', notificationError.message);
        // Continuar execu√ß√£o mesmo com falha nas notifica√ß√µes
      }

      console.log('üéâ [CURSOS] Processo completo de cria√ß√£o de curso finalizado');
      res.status(201).json({
        message: "Curso criado com sucesso!",
        curso: {
          id_curso: novoCurso.id_curso,
          nome: novoCurso.nome
        }
      });

    } catch (error) {
      // Reverter transa√ß√£o em caso de qualquer erro
      await t.rollback();
      console.error('‚ùå [CURSOS] Erro na transa√ß√£o - a reverter altera√ß√µes:', error.message);
      throw error;
    }

  } catch (error) {
    console.error('‚ùå [CURSOS] Erro geral ao criar curso:', error.message);
    res.status(500).json({ 
      message: "Erro no servidor ao criar curso.", 
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Atualiza curso existente
 * 
 * Fun√ß√£o complexa para edi√ß√£o de cursos que gere m√∫ltiplos aspetos:
 * 1. Valida√ß√£o de permiss√µes e dados
 * 2. Detec√ß√£o autom√°tica de altera√ß√µes relevantes
 * 3. Renomea√ß√£o de diret√≥rios se o nome mudou
 * 4. Gest√£o de nova imagem de capa
 * 5. Atualiza√ß√£o autom√°tica do estado baseado nas datas
 * 6. Envio de notifica√ß√µes espec√≠ficas por tipo de altera√ß√£o
 * 
 * Sistema de notifica√ß√µes inteligente:
 * - Altera√ß√µes gerais (nome, descri√ß√£o, etc.)
 * - Altera√ß√µes espec√≠ficas de formador
 * - Altera√ß√µes de cronograma (datas)
 * 
 * @param {Object} req - Requisi√ß√£o Express com dados atualizados
 * @param {Object} res - Resposta Express com confirma√ß√£o e detalhes das altera√ß√µes
 */
const updateCurso = async (req, res) => {
  try {
    const id = req.params.id;
    console.log(`üìù [CURSOS] A iniciar atualiza√ß√£o do curso ${id}`);
    console.log('üìã [CURSOS] Dados recebidos para atualiza√ß√£o:', req.body);
    
    const { 
      nome, descricao, tipo, vagas, duracao, data_inicio, data_fim, 
      id_formador, id_area, id_categoria, id_topico_area, ativo 
    } = req.body;

    // Carregar dados atuais do curso com todas as rela√ß√µes necess√°rias
    const cursoAtual = await Curso.findByPk(id, {
      include: [
        { model: User, as: 'formador', attributes: ['id_utilizador', 'nome'] },
        { model: Area, as: 'area', attributes: ['nome'] },
        { model: Categoria, as: 'categoria', attributes: ['nome'] },
        { model: Topico_Area, as: 'Topico_Area', attributes: ['titulo'] }
      ]
    });

    if (!cursoAtual) {
      console.warn(`‚ö†Ô∏è [CURSOS] Curso ${id} n√£o encontrado para atualiza√ß√£o`);
      return res.status(404).json({ message: "Curso n√£o encontrado" });
    }

    console.log(`üìñ [CURSOS] A atualizar curso: ${cursoAtual.nome}`);

    // === VALIDA√á√ïES ESPEC√çFICAS ===
    if (tipo === 'sincrono' && !id_formador) {
      console.warn('‚ö†Ô∏è [CURSOS] Formador obrigat√≥rio para curso s√≠ncrono');
      return res.status(400).json({ message: "√â obrigat√≥rio selecionar um formador para cursos s√≠ncronos!" });
    }

    // === GEST√ÉO DE DIRET√ìRIOS E RENOMEA√á√ÉO ===
    const nomeAtual = cursoAtual.nome;
    const novoNome = nome || nomeAtual;
    const nomeMudou = novoNome !== nomeAtual;

    console.log(`üìÇ [CURSOS] Verifica√ß√£o de mudan√ßa de nome: ${nomeMudou} (${nomeAtual} ‚Üí ${novoNome})`);

    // Preparar caminhos de diret√≥rios
    const cursoSlugAtual = uploadUtils.normalizarNome(nomeAtual);
    const novoCursoSlug = uploadUtils.normalizarNome(novoNome);
    
    const pastaAtual = path.join(uploadUtils.BASE_UPLOAD_DIR, 'cursos', cursoSlugAtual);
    const novaPasta = path.join(uploadUtils.BASE_UPLOAD_DIR, 'cursos', novoCursoSlug);
    
    const dirPathAtual = cursoAtual.dir_path || `uploads/cursos/${cursoSlugAtual}`;
    let novoDirPath = `uploads/cursos/${novoCursoSlug}`;

    // Executar renomea√ß√£o de diret√≥rio se necess√°rio
    let pastaRenomeada = false;
    if (nomeMudou && fs.existsSync(pastaAtual)) {
      try {
        // Verificar se o destino j√° existe para evitar conflitos
        if (fs.existsSync(novaPasta)) {
          let contador = 1;
          let novaPastaUnica = `${novaPasta}_${contador}`;
          while (fs.existsSync(novaPastaUnica)) {
            contador++;
            novaPastaUnica = `${novaPasta}_${contador}`;
          }
          fs.renameSync(pastaAtual, novaPastaUnica);
          
          const slugUnico = `${novoCursoSlug}_${contador}`;
          novoDirPath = `uploads/cursos/${slugUnico}`;
          console.log(`üìÅ [CURSOS] Pasta renomeada com sufixo √∫nico: ${slugUnico}`);
        } else {
          fs.renameSync(pastaAtual, novaPasta);
          console.log(`üìÅ [CURSOS] Pasta renomeada: ${pastaAtual} ‚Üí ${novaPasta}`);
        }
        
        pastaRenomeada = true;
      } catch (renameError) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao renomear pasta (continuando):', renameError.message);
        pastaRenomeada = false;
      }
    }

    // === PROCESSAMENTO DE IMAGEM ===
    let novaImagemPath = cursoAtual.imagem_path;
    
    if (req.file) {
      // Nova imagem enviada
      novaImagemPath = `${novoDirPath}/capa.png`;
      console.log(`üñºÔ∏è [CURSOS] Nova imagem de capa processada: ${novaImagemPath}`);
    } else if (nomeMudou && cursoAtual.imagem_path) {
      // Apenas atualizar caminho da imagem existente
      novaImagemPath = `${novoDirPath}/capa.png`;
      console.log(`üñºÔ∏è [CURSOS] Caminho de imagem atualizado: ${novaImagemPath}`);
    }

    // === DETEC√á√ÉO INTELIGENTE DE ALTERA√á√ïES ===
    const alteracoes = [];

    console.log('üîç [CURSOS] A analisar altera√ß√µes para sistema de notifica√ß√µes...');

    // Verificar cada campo relevante para altera√ß√µes
    if (nome && nome !== cursoAtual.nome) {
      alteracoes.push({
        campo: 'nome',
        valor_antigo: cursoAtual.nome,
        valor_novo: nome
      });
    }

    if (descricao && descricao !== cursoAtual.descricao) {
      alteracoes.push({
        campo: 'descricao',
        valor_antigo: cursoAtual.descricao || 'Sem descri√ß√£o',
        valor_novo: descricao
      });
    }

    if (tipo && tipo !== cursoAtual.tipo) {
      alteracoes.push({
        campo: 'tipo',
        valor_antigo: cursoAtual.tipo,
        valor_novo: tipo
      });
    }

    if (duracao !== undefined && parseInt(duracao, 10) !== cursoAtual.duracao) {
      alteracoes.push({
        campo: 'duracao',
        valor_antigo: `${cursoAtual.duracao} horas`,
        valor_novo: `${duracao} horas`
      });
    }

    // Verificar altera√ß√µes de vagas (apenas para cursos s√≠ncronos)
    if (tipo === 'sincrono' && vagas !== undefined) {
      const novasVagas = parseInt(vagas, 10);
      if (novasVagas !== cursoAtual.vagas) {
        alteracoes.push({
          campo: 'vagas',
          valor_antigo: cursoAtual.vagas ? `${cursoAtual.vagas} vagas` : 'Sem limite',
          valor_novo: `${novasVagas} vagas`
        });
      }
    }

    // Verificar altera√ß√µes em campos relacionados (com nomes amig√°veis)
    if (id_area && parseInt(id_area) !== cursoAtual.id_area) {
      const novaArea = await Area.findByPk(id_area);
      alteracoes.push({
        campo: 'id_area',
        valor_antigo: cursoAtual.area ? cursoAtual.area.nome : '√Årea anterior',
        valor_novo: novaArea ? novaArea.nome : 'Nova √°rea'
      });
    }

    if (id_categoria && parseInt(id_categoria) !== cursoAtual.id_categoria) {
      const novaCategoria = await Categoria.findByPk(id_categoria);
      alteracoes.push({
        campo: 'id_categoria',
        valor_antigo: cursoAtual.categoria ? cursoAtual.categoria.nome : 'Categoria anterior',
        valor_novo: novaCategoria ? novaCategoria.nome : 'Nova categoria'
      });
    }

    if (id_topico_area && parseInt(id_topico_area) !== cursoAtual.id_topico_area) {
      const novoTopico = await Topico_Area.findByPk(id_topico_area);
      alteracoes.push({
        campo: 'id_topico_area',
        valor_antigo: cursoAtual.Topico_Area ? cursoAtual.Topico_Area.titulo : 'T√≥pico anterior',
        valor_novo: novoTopico ? novoTopico.titulo : 'Novo t√≥pico'
      });
    }

    console.log(`üìä [CURSOS] ${alteracoes.length} altera√ß√µes detetadas:`, alteracoes.map(a => a.campo));

    // Guardar dados relevantes para notifica√ß√µes espec√≠ficas
    const dataInicioAntiga = cursoAtual.data_inicio;
    const dataFimAntiga = cursoAtual.data_fim;
    const formadorAntigo = cursoAtual.formador ? {
      id_utilizador: cursoAtual.formador.id_utilizador,
      nome: cursoAtual.formador.nome
    } : null;

    // === C√ÅLCULO AUTOM√ÅTICO DO ESTADO DO CURSO ===
    let novoEstado = cursoAtual.estado;
    if (data_inicio || data_fim) {
      const dataAtual = new Date();
      const novaDataInicio = data_inicio ? new Date(data_inicio) : new Date(cursoAtual.data_inicio);
      const novaDataFim = data_fim ? new Date(data_fim) : new Date(cursoAtual.data_fim);
      
      if (novaDataFim < dataAtual) {
        novoEstado = 'terminado';
      } else if (novaDataInicio <= dataAtual) {
        novoEstado = 'em_curso';
      } else {
        novoEstado = 'planeado';
      }
      
      console.log(`üìÖ [CURSOS] Estado calculado automaticamente: ${novoEstado}`);
    }

    // Determinar vagas finais baseado no tipo
    let vagasFinais = cursoAtual.vagas;
    if (tipo === 'sincrono' && vagas !== undefined) {
      vagasFinais = parseInt(vagas, 10);
    } else if (tipo === 'assincrono') {
      vagasFinais = null; // Cursos ass√≠ncronos n√£o t√™m limite
    }

    // === ATUALIZA√á√ÉO NA BASE DE DADOS ===
    await cursoAtual.update({
      nome: novoNome,
      descricao: descricao || cursoAtual.descricao,
      tipo: tipo || cursoAtual.tipo,
      vagas: vagasFinais,
      data_inicio: data_inicio || cursoAtual.data_inicio,
      data_fim: data_fim || cursoAtual.data_fim,
      id_formador: tipo === 'sincrono' ? 
        (id_formador !== undefined ? id_formador : cursoAtual.id_formador) : 
        null,
      id_area: id_area || cursoAtual.id_area,
      id_categoria: id_categoria || cursoAtual.id_categoria,
      id_topico_area: id_topico_area || cursoAtual.id_topico_area,
      duracao: duracao !== undefined ? parseInt(duracao, 10) : cursoAtual.duracao,
      ativo: ativo !== undefined ? ativo : cursoAtual.ativo,
      estado: novoEstado,
      imagem_path: novaImagemPath,
      dir_path: novoDirPath
    });

    console.log('‚úÖ [CURSOS] Curso atualizado na base de dados com sucesso');

    // Recarregar curso com dados atualizados para notifica√ß√µes
    const cursoAtualizado = await Curso.findByPk(id, {
      include: [{ model: User, as: 'formador', attributes: ['id_utilizador', 'nome'] }]
    });

    // === SISTEMA DE NOTIFICA√á√ïES INTELIGENTE ===
    
    console.log('üì¢ [CURSOS] A processar notifica√ß√µes de altera√ß√µes...');
    
    let notificacoesEnviadas = 0;

    // 1. Notificar altera√ß√µes gerais (nome, descri√ß√£o, tipo, etc.)
    if (alteracoes.length > 0) {
      try {
        console.log('üì§ [CURSOS] A enviar notifica√ß√µes de altera√ß√µes gerais...');
        const resultado = await notificacaoController.notificarCursoAlterado(cursoAtualizado, alteracoes, req.io);
        if (resultado) {
          notificacoesEnviadas += resultado.associacoes.length;
          console.log(`‚úÖ [CURSOS] ${resultado.associacoes.length} notifica√ß√µes de altera√ß√µes gerais enviadas`);
        }
      } catch (notificationError) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao enviar notifica√ß√µes de altera√ß√µes gerais:', notificationError.message);
      }
    }

    // 2. Notificar altera√ß√£o espec√≠fica de formador
    const formadorAntualId = formadorAntigo?.id_utilizador;
    const novoFormadorId = cursoAtualizado.id_formador;
    
    if (novoFormadorId !== formadorAntualId) {
      try {
        console.log('üë®‚Äçüè´ [CURSOS] A enviar notifica√ß√µes espec√≠ficas de altera√ß√£o de formador...');
        const resultado = await notificacaoController.notificarFormadorAlterado(
          cursoAtualizado,
          formadorAntigo,
          cursoAtualizado.formador,
          req.io
        );
        if (resultado) {
          console.log(`‚úÖ [CURSOS] ${resultado.associacoes.length} notifica√ß√µes de formador enviadas`);
        }
      } catch (notificationError) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao enviar notifica√ß√µes de formador:', notificationError.message);
      }
    }

    // 3. Notificar altera√ß√µes cr√≠ticas de cronograma
    const dataInicioAlterada = data_inicio &&
      new Date(data_inicio).getTime() !== new Date(dataInicioAntiga).getTime();
    const dataFimAlterada = data_fim &&
      new Date(data_fim).getTime() !== new Date(dataFimAntiga).getTime();

    if (dataInicioAlterada || dataFimAlterada) {
      try {
        console.log('üìÖ [CURSOS] A enviar notifica√ß√µes cr√≠ticas de altera√ß√£o de cronograma...');
        const resultado = await notificacaoController.notificarDataCursoAlterada(
          cursoAtualizado,
          dataInicioAntiga,
          dataFimAntiga,
          req.io
        );
        if (resultado) {
          console.log(`‚úÖ [CURSOS] ${resultado.associacoes.length} notifica√ß√µes de cronograma enviadas`);
        }
      } catch (notificationError) {
        console.warn('‚ö†Ô∏è [CURSOS] Erro ao enviar notifica√ß√µes de cronograma:', notificationError.message);
      }
    }

    console.log(`üéâ [CURSOS] Atualiza√ß√£o de curso finalizada. Total de notifica√ß√µes: ${notificacoesEnviadas}`);

    return res.status(200).json({
      message: "Curso atualizado com sucesso",
      curso: cursoAtualizado,
      imagemAtualizada: !!req.file,
      pastaRenomeada: pastaRenomeada,
      nomeMudou: nomeMudou,
      alteracoesNotificadas: alteracoes.length,
      alteracoes: alteracoes
    });

  } catch (error) {
    console.error('‚ùå [CURSOS] Erro geral ao atualizar curso:', error.message);
    return res.status(500).json({
      message: "Erro ao atualizar curso",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Associa formador a um curso espec√≠fico
 * 
 * Fun√ß√£o auxiliar para alterar o formador respons√°vel por um curso.
 * Inclui valida√ß√µes de compet√™ncias e notifica√ß√µes autom√°ticas.
 * 
 * @param {Object} req - Requisi√ß√£o com IDs do curso e formador
 * @param {Object} res - Resposta Express com confirma√ß√£o
 */
const associarFormadorCurso = async (req, res) => {
  try {
    const { id_curso, id_formador } = req.body;

    if (!id_curso || !id_formador) {
      console.warn('‚ö†Ô∏è [CURSOS] Dados insuficientes para associa√ß√£o de formador');
      return res.status(400).json({ message: "√â necess√°rio fornecer o ID do curso e do formador" });
    }

    console.log(`üë®‚Äçüè´ [CURSOS] A associar formador ${id_formador} ao curso ${id_curso}`);

    // Verificar se o curso existe
    const curso = await Curso.findByPk(id_curso);
    if (!curso) {
      console.warn(`‚ö†Ô∏è [CURSOS] Curso ${id_curso} n√£o encontrado`);
      return res.status(404).json({ message: "Curso n√£o encontrado" });
    }

    // Verificar se o utilizador √© realmente um formador
    const formador = await User.findByPk(id_formador);
    if (!formador || formador.id_cargo !== 2) {
      console.warn(`‚ö†Ô∏è [CURSOS] Utilizador ${id_formador} n√£o √© formador v√°lido`);
      return res.status(400).json({ message: "O utilizador especificado n√£o √© um formador" });
    }

    // Verificar compet√™ncias do formador na categoria do curso
    const categoriaDoFormador = await sequelize.query(
      `SELECT COUNT(*) as count FROM formador_categoria 
       WHERE id_formador = :id_formador AND id_categoria = :id_categoria`,
      {
        replacements: { id_formador, id_categoria: curso.id_categoria },
        type: sequelize.QueryTypes.SELECT
      }
    );

    if (categoriaDoFormador[0].count === '0') {
      console.warn(`‚ö†Ô∏è [CURSOS] Formador sem compet√™ncias na categoria ${curso.id_categoria}`);
      return res.status(400).json({
        message: "O formador n√£o est√° associado √† categoria deste curso",
        categoriaId: curso.id_categoria
      });
    }

    // Guardar dados do formador anterior para notifica√ß√£o
    const formadorAntigo = curso.id_formador ?
      await User.findByPk(curso.id_formador, { attributes: ['id_utilizador', 'nome'] }) : null;

    // Atualizar formador do curso
    curso.id_formador = id_formador;
    await curso.save();

    console.log(`‚úÖ [CURSOS] Formador associado com sucesso`);

    // Recarregar curso para notifica√ß√µes
    const cursoAtualizado = await Curso.findByPk(id_curso, {
      include: [{ model: User, as: 'formador', attributes: ['id_utilizador', 'nome'] }]
    });

    // Enviar notifica√ß√£o de altera√ß√£o de formador
    try {
      console.log('üì¢ [CURSOS] A enviar notifica√ß√µes de altera√ß√£o de formador...');
      await notificacaoController.notificarFormadorAlterado(
        cursoAtualizado,
        formadorAntigo,
        formador,
        req.io
      );
      console.log('‚úÖ [CURSOS] Notifica√ß√µes de altera√ß√£o de formador enviadas');
    } catch (notificationError) {
      console.warn('‚ö†Ô∏è [CURSOS] Erro ao enviar notifica√ß√µes (n√£o cr√≠tico):', notificationError.message);
    }

    res.json({
      message: "Formador associado ao curso com sucesso",
      curso: {
        id_curso: curso.id_curso,
        nome: curso.nome,
        id_formador: curso.id_formador
      }
    });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao associar formador:', error.message);
    res.status(500).json({ 
      message: "Erro ao associar formador ao curso", 
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

// =============================================================================
// OPERA√á√ïES DE ELIMINA√á√ÉO
// =============================================================================

/**
 * Elimina curso e toda a estrutura associada
 * 
 * Opera√ß√£o irrevers√≠vel que remove completamente:
 * - Registo do curso na base de dados
 * - Todas as inscri√ß√µes relacionadas
 * - Estrutura de t√≥picos e conte√∫dos
 * - Associa√ß√µes com outros cursos
 * - Diret√≥rio completo no sistema de ficheiros
 * 
 * Restrita apenas a administradores por motivos de seguran√ßa.
 * 
 * @param {Object} req - Requisi√ß√£o com ID do curso nos par√¢metros
 * @param {Object} res - Resposta Express com estat√≠sticas da elimina√ß√£o
 */
const deleteCurso = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è [CURSOS] A iniciar elimina√ß√£o completa do curso ${id}`);

    // Verifica√ß√£o rigorosa de permiss√µes (apenas administradores)
    if (req.user.id_cargo !== 1) {
      console.warn(`‚ö†Ô∏è [CURSOS] Utilizador ${req.user.id_utilizador} sem permiss√£o para eliminar cursos`);
      return res.status(403).json({
        message: "N√£o tens permiss√£o para eliminar cursos"
      });
    }

    // Verificar se o curso existe antes de tentar eliminar
    const curso = await Curso.findByPk(id);

    if (!curso) {
      console.warn(`‚ö†Ô∏è [CURSOS] Curso ${id} n√£o encontrado para elimina√ß√£o`);
      return res.status(404).json({ message: "Curso n√£o encontrado!" });
    }

    console.log(`üîç [CURSOS] A eliminar curso: ${curso.nome}`);

    // Preparar caminhos para elimina√ß√£o de diret√≥rios
    const cursoSlug = uploadUtils.normalizarNome(curso.nome);
    const cursoDir = curso.dir_path || `uploads/cursos/${cursoSlug}`;
    const cursoDirAbs = path.join(uploadUtils.BASE_UPLOAD_DIR, 'cursos', cursoSlug);

    try {
      // === ELIMINA√á√ÉO SISTEM√ÅTICA DE DEPEND√äNCIAS ===

      // 1. Eliminar associa√ß√µes bidirecionais com outros cursos
      const numAssociacaoRemovidas = await AssociarCursos.destroy({
        where: {
          [Op.or]: [
            { id_curso_origem: id },
            { id_curso_destino: id }
          ]
        }
      });
      console.log(`üîó [CURSOS] ${numAssociacaoRemovidas} associa√ß√µes removidas`);

      // 2. Eliminar todas as inscri√ß√µes no curso
      const numInscricoesRemovidas = await Inscricao_Curso.destroy({
        where: { id_curso: id }
      });
      console.log(`üë• [CURSOS] ${numInscricoesRemovidas} inscri√ß√µes removidas`);

      // 3. Eliminar estrutura hier√°rquica de conte√∫dos
      
      // Primeiro, encontrar todos os t√≥picos do curso
      const topicos = await Curso_Topicos.findAll({
        where: { id_curso: id }
      });

      const topicoIds = topicos.map(topico => topico.id_topico);
      console.log(`üìù [CURSOS] ${topicoIds.length} t√≥picos encontrados para elimina√ß√£o`);

      if (topicoIds.length > 0) {
        // Encontrar pastas dentro dos t√≥picos
        const pastas = await PastaCurso.findAll({
          where: { id_topico: { [Op.in]: topicoIds } }
        });

        const pastaIds = pastas.map(pasta => pasta.id_pasta);
        console.log(`üìÅ [CURSOS] ${pastaIds.length} pastas encontradas`);

        // Eliminar conte√∫dos das pastas
        if (pastaIds.length > 0) {
          const numConteudosRemovidos = await ConteudoCurso.destroy({
            where: { id_pasta: { [Op.in]: pastaIds } }
          });
          console.log(`üìÑ [CURSOS] ${numConteudosRemovidos} conte√∫dos de pastas removidos`);
        }

        // Eliminar as pastas
        const numPastasRemovidas = await PastaCurso.destroy({
          where: { id_topico: { [Op.in]: topicoIds } }
        });
        console.log(`üìÅ [CURSOS] ${numPastasRemovidas} pastas removidas`);

        // Eliminar os t√≥picos
        const numTopicosRemovidos = await Curso_Topicos.destroy({
          where: { id_curso: id }
        });
        console.log(`üìù [CURSOS] ${numTopicosRemovidos} t√≥picos removidos`);
      }

      // 4. Eliminar conte√∫dos diretos do curso (n√£o organizados em pastas)
      const numConteudosDirectosRemovidos = await ConteudoCurso.destroy({
        where: { id_curso: id }
      });
      console.log(`üìÑ [CURSOS] ${numConteudosDirectosRemovidos} conte√∫dos diretos removidos`);

      // 5. Eliminar o registo principal do curso
      await curso.destroy();
      console.log(`‚úÖ [CURSOS] Registo do curso eliminado da base de dados`);

      // === ELIMINA√á√ÉO DO DIRET√ìRIO F√çSICO ===
      if (fs.existsSync(cursoDirAbs)) {
        console.log(`üìÅ [CURSOS] A remover diret√≥rio f√≠sico: ${cursoDirAbs}`);
        
        /**
         * Remove diret√≥rio e todo o conte√∫do de forma recursiva
         * Fun√ß√£o interna para garantir elimina√ß√£o completa
         */
        const removerDiretorioRecursivo = (dir) => {
          if (fs.existsSync(dir)) {
            fs.readdirSync(dir).forEach((ficheiro) => {
              const caminhoCompleto = path.join(dir, ficheiro);
              if (fs.lstatSync(caminhoCompleto).isDirectory()) {
                // Chamada recursiva para subdiret√≥rios
                removerDiretorioRecursivo(caminhoCompleto);
              } else {
                // Eliminar ficheiro individual
                fs.unlinkSync(caminhoCompleto);
              }
            });
            // Eliminar o diret√≥rio vazio
            fs.rmdirSync(dir);
          }
        };

        removerDiretorioRecursivo(cursoDirAbs);
        console.log(`‚úÖ [CURSOS] Diret√≥rio f√≠sico removido com sucesso`);
      } else {
        console.log(`‚ÑπÔ∏è [CURSOS] Diret√≥rio f√≠sico n√£o encontrado: ${cursoDirAbs}`);
      }

      console.log('üéâ [CURSOS] Elimina√ß√£o completa do curso conclu√≠da com sucesso');

      return res.json({
        message: "Curso eliminado com sucesso!",
        estatisticas: {
          inscricoesRemovidas: numInscricoesRemovidas,
          associacoesRemovidas: numAssociacaoRemovidas,
          topicosRemovidos: topicoIds.length,
          diretorioRemovido: fs.existsSync(cursoDirAbs) ? false : true
        }
      });

    } catch (error) {
      console.error('‚ùå [CURSOS] Erro ao eliminar depend√™ncias do curso:', error.message);
      return res.status(500).json({
        message: "Erro ao eliminar depend√™ncias do curso",
        error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
      });
    }
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro geral ao eliminar curso:', error.message);
    return res.status(500).json({
      message: "Erro no servidor ao eliminar curso.",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

// =============================================================================
// FUNCIONALIDADES AUXILIARES E RECOMENDA√á√ïES
// =============================================================================

/**
 * Gera sugest√µes personalizadas de cursos para o utilizador
 * 
 * Sistema de recomenda√ß√£o inteligente que analisa:
 * 1. Hist√≥rico de inscri√ß√µes do utilizador
 * 2. Categorias e √°reas de interesse demonstrado
 * 3. Disponibilidade atual dos cursos
 * 
 * Algoritmo de sugest√£o:
 * - Primeira tentativa: cursos de categorias conhecidas em √°reas novas
 * - Fallback: cursos aleat√≥rios dispon√≠veis
 * 
 * @param {Object} req - Requisi√ß√£o Express com utilizador autenticado
 * @param {Object} res - Resposta Express com lista de cursos sugeridos
 */
const getCursosSugeridos = async (req, res) => {
  try {
    const id_utilizador = req.user.id_utilizador;
    console.log(`üéØ [CURSOS] A gerar sugest√µes personalizadas para utilizador ${id_utilizador}`);

    // Analisar hist√≥rico de inscri√ß√µes do utilizador
    const inscricoes = await Inscricao_Curso.findAll({
      where: { id_utilizador }
    });

    const cursosInscritosIds = inscricoes.map(i => i.id_curso);
    console.log(`üìä [CURSOS] ${cursosInscritosIds.length} cursos no hist√≥rico do utilizador`);

    let cursosSugeridos = [];

    if (inscricoes.length > 0) {
      // === AN√ÅLISE DE PREFER√äNCIAS BASEADA NO HIST√ìRICO ===
      
      // Buscar dados dos cursos onde o utilizador se inscreveu
      const cursosInscritos = await Curso.findAll({
        where: { id_curso: cursosInscritosIds }
      });

      // Extrair padr√µes de interesse
      const categoriasInscrito = [...new Set(cursosInscritos.map(c => c.id_categoria))];
      const areasInscrito = [...new Set(cursosInscritos.map(c => c.id_area))];

      console.log(`üè∑Ô∏è [CURSOS] Categorias de interesse identificadas: ${categoriasInscrito.join(', ')}`);
      console.log(`üåç [CURSOS] √Åreas j√° exploradas: ${areasInscrito.join(', ')}`);

      // === SUGEST√ÉO INTELIGENTE: EXPANDIR HORIZONTES ===
      // Sugerir cursos de categorias conhecidas mas em √°reas ainda n√£o exploradas
      cursosSugeridos = await Curso.findAll({
        where: {
          id_categoria: categoriasInscrito, // Categorias familiares
          id_area: { [Op.notIn]: areasInscrito }, // √Åreas novas
          id_curso: { [Op.notIn]: cursosInscritosIds }, // N√£o j√° inscritos
          [Op.or]: [
            { tipo: 'assincrono' }, // Sempre dispon√≠veis
            { tipo: 'sincrono', vagas: { [Op.gt]: 0 } } // Com vagas dispon√≠veis
          ],
          ativo: true
        },
        limit: 10,
        order: sequelize.literal('RANDOM()') // Variedade nas sugest√µes
      });

      console.log(`üí° [CURSOS] ${cursosSugeridos.length} sugest√µes baseadas em prefer√™ncias geradas`);
    }

    // === FALLBACK: SUGEST√ïES ALEAT√ìRIAS ===
    if (cursosSugeridos.length === 0) {
      console.log('üé≤ [CURSOS] A gerar sugest√µes aleat√≥rias (sem hist√≥rico ou prefer√™ncias insuficientes)');
      
      cursosSugeridos = await Curso.findAll({
        where: {
          id_curso: { [Op.notIn]: cursosInscritosIds },
          [Op.or]: [
            { tipo: 'assincrono' },
            { tipo: 'sincrono', vagas: { [Op.gt]: 0 } }
          ],
          ativo: true
        },
        limit: 10,
        order: sequelize.literal('RANDOM()')
      });

      console.log(`üé≤ [CURSOS] ${cursosSugeridos.length} sugest√µes aleat√≥rias geradas`);
    }

    console.log(`‚úÖ [CURSOS] Sistema de recomenda√ß√£o conclu√≠do`);
    return res.json(cursosSugeridos);
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro no sistema de recomenda√ß√£o:', error.message);
    res.status(500).json({ 
      message: "Erro no servidor ao procurar cursos sugeridos.",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Lista inscri√ß√µes ativas de um curso espec√≠fico
 * 
 * Fun√ß√£o de gest√£o para formadores e administradores visualizarem
 * a lista de alunos inscritos num curso. Inclui dados de contacto
 * b√°sicos para comunica√ß√£o.
 * 
 * @param {Object} req - Requisi√ß√£o com ID do curso nos par√¢metros
 * @param {Object} res - Resposta Express com lista de inscritos
 */
const getInscricoesCurso = async (req, res) => {
  try {
    const id_curso = req.params.id;
    console.log(`üë• [CURSOS] A carregar lista de inscri√ß√µes do curso ${id_curso}`);

    const inscricoes = await Inscricao_Curso.findAll({
      where: { id_curso },
      include: [
        {
          model: User,
          as: "utilizador",
          attributes: ['id_utilizador', 'nome', 'email', 'telefone'],
          required: true // INNER JOIN para garantir dados do utilizador
        }
      ]
    });

    console.log(`‚úÖ [CURSOS] ${inscricoes.length} inscri√ß√µes carregadas`);
    res.json(inscricoes);
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao carregar inscri√ß√µes:', error.message);
    res.status(500).json({ 
      message: "Erro ao procurar inscri√ß√µes",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

// =============================================================================
// GEST√ÉO DE T√ìPICOS ORGANIZACIONAIS
// =============================================================================

/**
 * Obt√©m estrutura de t√≥picos de um curso
 * 
 * Lista todos os t√≥picos organizacionais de um curso ordenados
 * por sequ√™ncia pedag√≥gica. Usado para construir a navega√ß√£o
 * e estrutura de conte√∫dos do curso.
 * 
 * @param {Object} req - Requisi√ß√£o com ID do curso nos par√¢metros
 * @param {Object} res - Resposta Express com lista de t√≥picos
 */
const getTopicosCurso = async (req, res) => {
  try {
    const id_curso = req.params.id;
    console.log(`üìù [CURSOS] A carregar t√≥picos organizacionais do curso ${id_curso}`);

    const topicos = await Curso_Topicos.findAll({
      where: { id_curso, ativo: true },
      order: [['ordem', 'ASC']] // Ordena√ß√£o pedag√≥gica
    });

    console.log(`‚úÖ [CURSOS] ${topicos.length} t√≥picos organizacionais encontrados`);
    res.json(topicos);
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao carregar t√≥picos:', error.message);
    res.status(500).json({ 
      message: "Erro ao obter t√≥picos do curso",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Cria novo t√≥pico organizacional para um curso
 * 
 * Adiciona nova sec√ß√£o tem√°tica √† estrutura do curso.
 * A ordem pode ser especificada ou calculada automaticamente.
 * 
 * @param {Object} req - Requisi√ß√£o com dados do novo t√≥pico
 * @param {Object} res - Resposta Express com t√≥pico criado
 */
const createCurso_Topicos = async (req, res) => {
  try {
    const id_curso = req.params.id;
    const { nome, ordem } = req.body;

    if (!nome) {
      console.warn('‚ö†Ô∏è [CURSOS] Nome do t√≥pico √© obrigat√≥rio');
      return res.status(400).json({ message: "Nome do t√≥pico √© obrigat√≥rio" });
    }

    console.log(`üìù [CURSOS] A criar t√≥pico organizacional "${nome}" para curso ${id_curso}`);

    // Verificar se o curso existe
    const curso = await Curso.findByPk(id_curso);
    if (!curso) {
      console.warn(`‚ö†Ô∏è [CURSOS] Curso ${id_curso} n√£o encontrado`);
      return res.status(404).json({ message: "Curso n√£o encontrado" });
    }

    // Calcular ordem autom√°tica se n√£o especificada
    const ultimaOrdem = await Curso_Topicos.max('ordem', {
      where: { id_curso }
    }) || 0;

    const ordemFinal = ordem || ultimaOrdem + 1;

    // Criar o t√≥pico organizacional
    const novoTopico = await Curso_Topicos.create({
      nome,
      id_curso,
      ordem: ordemFinal,
      ativo: true
    });

    console.log(`‚úÖ [CURSOS] T√≥pico criado com ID ${novoTopico.id_topico} na posi√ß√£o ${ordemFinal}`);

    res.status(201).json({
      message: "T√≥pico criado com sucesso",
      topico: novoTopico
    });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao criar t√≥pico organizacional:', error.message);
    res.status(500).json({ 
      message: "Erro ao criar t√≥pico",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Atualiza t√≥pico organizacional existente
 * 
 * Permite modificar nome, ordem ou estado de ativa√ß√£o.
 * Suporta reordena√ß√£o da estrutura pedag√≥gica.
 * 
 * @param {Object} req - Requisi√ß√£o com dados atualizados
 * @param {Object} res - Resposta Express com t√≥pico atualizado
 */
const updateCurso_Topicos = async (req, res) => {
  try {
    const id_topico = req.params.id;
    const { nome, ordem, ativo } = req.body;

    console.log(`üìù [CURSOS] A atualizar t√≥pico organizacional ${id_topico}`);

    // Verificar se o t√≥pico existe
    const topico = await Curso_Topicos.findByPk(id_topico);
    if (!topico) {
      console.warn(`‚ö†Ô∏è [CURSOS] T√≥pico ${id_topico} n√£o encontrado`);
      return res.status(404).json({ message: "T√≥pico n√£o encontrado" });
    }

    // Atualizar apenas campos fornecidos
    await topico.update({
      nome: nome !== undefined ? nome : topico.nome,
      ordem: ordem !== undefined ? ordem : topico.ordem,
      ativo: ativo !== undefined ? ativo : topico.ativo
    });

    console.log(`‚úÖ [CURSOS] T√≥pico ${id_topico} atualizado com sucesso`);

    res.json({
      message: "T√≥pico atualizado com sucesso",
      topico
    });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao atualizar t√≥pico:', error.message);
    res.status(500).json({ 
      message: "Erro ao atualizar t√≥pico",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Elimina t√≥pico organizacional
 * 
 * Remove t√≥pico do curso. Se tiver depend√™ncias (pastas/conte√∫dos),
 * desativa em vez de eliminar para preservar integridade referencial.
 * 
 * @param {Object} req - Requisi√ß√£o com ID do t√≥pico nos par√¢metros
 * @param {Object} res - Resposta Express com resultado da opera√ß√£o
 */
const deleteCurso_Topicos = async (req, res) => {
  try {
    const id_topico = req.params.id;
    console.log(`üóëÔ∏è [CURSOS] A tentar eliminar t√≥pico organizacional ${id_topico}`);

    // Verificar se o t√≥pico existe
    const topico = await Curso_Topicos.findByPk(id_topico);
    if (!topico) {
      console.warn(`‚ö†Ô∏è [CURSOS] T√≥pico ${id_topico} n√£o encontrado`);
      return res.status(404).json({ message: "T√≥pico n√£o encontrado" });
    }

    // Verificar depend√™ncias (pastas associadas)
    const pastas = await PastaCurso.findAll({
      where: { id_topico }
    });

    if (pastas.length > 0) {
      // Desativar em vez de eliminar para preservar integridade
      await topico.update({ ativo: false });
      console.log(`‚ö†Ô∏è [CURSOS] T√≥pico ${id_topico} desativado (tem ${pastas.length} pastas associadas)`);
      
      return res.json({
        message: "T√≥pico desativado com sucesso. N√£o foi poss√≠vel eliminar pois possui pastas associadas.",
        desativado: true
      });
    }

    // Elimina√ß√£o segura se n√£o h√° depend√™ncias
    await topico.destroy();
    console.log(`‚úÖ [CURSOS] T√≥pico ${id_topico} eliminado com sucesso`);

    res.json({ message: "T√≥pico eliminado com sucesso" });
  } catch (error) {
    console.error('‚ùå [CURSOS] Erro ao eliminar t√≥pico:', error.message);
    res.status(500).json({ 
      message: "Erro ao eliminar t√≥pico",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

module.exports = {
  // Opera√ß√µes principais de gest√£o de cursos
  getAllCursos,
  getCursosByCategoria,
  getTopicoArea,
  createCurso,
  getCursoById,
  getInscricoesCurso,
  updateCurso,
  deleteCurso,
  
  // Funcionalidades auxiliares
  getCursosSugeridos,
  associarFormadorCurso,
  
  // Gest√£o de t√≥picos organizacionais
  getTopicosCurso,
  createCurso_Topicos,
  updateCurso_Topicos,
  deleteCurso_Topicos
};