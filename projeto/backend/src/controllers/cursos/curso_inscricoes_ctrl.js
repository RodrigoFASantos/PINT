const Inscricao_Curso = require("../../database/models/Inscricao_Curso");
const User = require("../../database/models/User");
const Curso = require("../../database/models/Curso");
const Categoria = require("../../database/models/Categoria");
const Area = require("../../database/models/Area");
const { sequelize } = require("../../config/db");
const emailService = require('../../utils/emailService');
const { Op } = require('sequelize');

/**
 * CONTROLADORES PARA GEST√ÉO COMPLETA DE INSCRI√á√ïES EM CURSOS
 * 
 * Vers√£o corrigida para resolver erros de campos inexistentes na BD
 */

// =============================================================================
// CONSULTA E LISTAGEM DE INSCRI√á√ïES
// =============================================================================

/**
 * Obter lista completa de todas as inscri√ß√µes do sistema
 */
const getAllInscricoes = async (req, res) => {
  try {
    console.log('üìã [INSCRICOES] A carregar todas as inscri√ß√µes do sistema');
    
    const inscricoes = await Inscricao_Curso.findAll({
      include: [
        {
          model: User,
          as: "utilizador",
          attributes: ['id_utilizador', 'nome', 'email'],
          required: false
        },
        {
          model: Curso,
          as: "curso",
          attributes: ['id_curso', 'nome', 'tipo'],
          required: false
        }
      ],
      order: [['data_inscricao', 'DESC']]
    });
    
    console.log(`‚úÖ [INSCRICOES] ${inscricoes.length} inscri√ß√µes encontradas`);
    res.json(inscricoes);
  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro ao carregar todas as inscri√ß√µes:', error.message);
    console.error('üìç [INSCRICOES] Stack trace:', error.stack);
    
    res.status(500).json({ 
      message: "Erro ao procurar inscri√ß√µes",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno',
      timestamp: new Date().toISOString()
    });
  }
};

/**
 * ‚úÖ FUN√á√ÉO CR√çTICA CORRIGIDA: Verificar se utilizador est√° inscrito num curso espec√≠fico
 */
const verificarInscricao = async (req, res) => {
  try {
    console.log('üîç [INSCRICOES] === IN√çCIO DA VERIFICA√á√ÉO DE INSCRI√á√ÉO ===');
    
    const { id_curso } = req.params;
    const id_utilizador = req.user?.id_utilizador || req.utilizador?.id_utilizador;

    console.log('üìã [INSCRICOES] Dados da requisi√ß√£o:', {
      id_curso,
      id_utilizador,
      user: req.user ? 'Presente' : 'Ausente',
      utilizador: req.utilizador ? 'Presente' : 'Ausente'
    });

    if (!id_curso) {
      return res.status(400).json({ 
        message: "ID do curso √© obrigat√≥rio",
        providedParams: req.params
      });
    }

    if (!id_utilizador) {
      return res.status(401).json({
        message: "Utilizador n√£o autenticado",
        error: "USER_ID_MISSING"
      });
    }

    // Verificar conex√£o com base de dados
    try {
      await sequelize.authenticate();
      console.log('‚úÖ [INSCRICOES] Conex√£o com BD confirmada');
    } catch (dbError) {
      console.error('‚ùå [INSCRICOES] Erro de conex√£o:', dbError.message);
      return res.status(503).json({
        message: "Servi√ßo temporariamente indispon√≠vel",
        error: "DATABASE_CONNECTION_FAILED"
      });
    }

    // Verificar se o curso existe
    let cursoExiste;
    try {
      cursoExiste = await Curso.findByPk(id_curso, {
        attributes: ['id_curso', 'nome', 'ativo']
      });
    } catch (cursoError) {
      console.error('‚ùå [INSCRICOES] Erro ao verificar curso:', cursoError.message);
      return res.status(500).json({
        message: "Erro ao verificar dados do curso",
        error: process.env.NODE_ENV === 'development' ? cursoError.message : 'Erro interno'
      });
    }

    if (!cursoExiste) {
      return res.status(404).json({
        message: "Curso n√£o encontrado",
        cursoId: id_curso
      });
    }

    // Procurar inscri√ß√£o
    let inscricao;
    try {
      inscricao = await Inscricao_Curso.findOne({
        where: {
          id_utilizador,
          id_curso,
          estado: "inscrito"
        },
        attributes: ['id_inscricao', 'data_inscricao', 'estado']
      });
    } catch (inscricaoError) {
      console.error('‚ùå [INSCRICOES] Erro ao verificar inscri√ß√£o:', inscricaoError.message);
      return res.status(500).json({
        message: "Erro ao verificar inscri√ß√£o",
        error: process.env.NODE_ENV === 'development' ? inscricaoError.message : 'Erro interno'
      });
    }

    const resultado = {
      inscrito: !!inscricao,
      inscricao: inscricao ? {
        id: inscricao.id_inscricao,
        data_inscricao: inscricao.data_inscricao,
        estado: inscricao.estado
      } : null,
      curso: {
        id: cursoExiste.id_curso,
        nome: cursoExiste.nome,
        ativo: cursoExiste.ativo
      },
      utilizador: {
        id: id_utilizador
      }
    };

    console.log('‚úÖ [INSCRICOES] Verifica√ß√£o conclu√≠da:', { inscrito: resultado.inscrito });
    return res.json(resultado);

  } catch (error) {
    console.error('‚ùå [INSCRICOES] ERRO na verifica√ß√£o de inscri√ß√£o:', error.message);
    console.error('üìç [INSCRICOES] Stack trace:', error.stack);

    res.status(500).json({
      message: "Erro interno ao verificar inscri√ß√£o",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno',
      timestamp: new Date().toISOString()
    });
  }
};

/**
 * Obter inscri√ß√µes de um curso espec√≠fico
 */
const getInscricoesPorCurso = async (req, res) => {
  try {
    const { id_curso } = req.params;
    const id_utilizador = req.user?.id_utilizador || req.utilizador?.id_utilizador;
    const id_cargo = req.user?.id_cargo || req.utilizador?.id_cargo;
    
    console.log(`üë• [INSCRICOES] A carregar inscri√ß√µes do curso ${id_curso}`);

    const curso = await Curso.findByPk(id_curso);
    if (!curso) {
      console.warn(`‚ö†Ô∏è [INSCRICOES] Curso ${id_curso} n√£o encontrado`);
      return res.status(404).json({ message: "Curso n√£o encontrado" });
    }

    // Verificar permiss√µes de acesso
    if (id_cargo !== 1 && id_utilizador !== curso.id_formador) {
      console.warn(`‚ö†Ô∏è [INSCRICOES] Acesso negado para utilizador ${id_utilizador}`);
      return res.status(403).json({ message: "Acesso negado" });
    }

    const inscricoes = await Inscricao_Curso.findAll({
      where: { id_curso, estado: "inscrito" },
      include: [
        { 
          model: User, 
          as: "utilizador", 
          attributes: ["id_utilizador", "nome", "email"],
          required: false
        }
      ],
      order: [["data_inscricao", "DESC"]]
    });

    console.log(`‚úÖ [INSCRICOES] ${inscricoes.length} inscri√ß√µes encontradas`);
    res.json(inscricoes);
  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro ao carregar inscri√ß√µes do curso:', error.message);
    res.status(500).json({ 
      message: "Erro ao procurar inscri√ß√µes do curso",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * ‚úÖ FUN√á√ÉO CR√çTICA CORRIGIDA: Obter hist√≥rico completo de inscri√ß√µes do utilizador autenticado
 */
const getMinhasInscricoes = async (req, res) => {
  try {
    const id_utilizador = req.user?.id_utilizador || req.utilizador?.id_utilizador;
    
    console.log(`üìö [INSCRICOES] A carregar hist√≥rico de inscri√ß√µes do utilizador ${id_utilizador}`);

    if (!id_utilizador) {
      console.error('‚ùå [INSCRICOES] ID do utilizador n√£o encontrado');
      return res.status(401).json({
        message: "Utilizador n√£o autenticado",
        error: "USER_ID_MISSING"
      });
    }

    // Verificar conex√£o com a base de dados
    try {
      await sequelize.authenticate();
      console.log('‚úÖ [INSCRICOES] Conex√£o com base de dados confirmada');
    } catch (dbError) {
      console.error('‚ùå [INSCRICOES] Erro de conex√£o com base de dados:', dbError.message);
      return res.status(503).json({
        message: "Servi√ßo temporariamente indispon√≠vel",
        error: "DATABASE_CONNECTION_FAILED"
      });
    }

    let inscricoes = [];
    
    try {
      console.log('üîç [INSCRICOES] A executar query de inscri√ß√µes...');
      
      // Query principal com relacionamentos seguros
      inscricoes = await Inscricao_Curso.findAll({
        where: { id_utilizador },
        include: [
          {
            model: Curso,
            as: "curso",
            required: false,
            attributes: ['id_curso', 'nome', 'tipo', 'data_inicio', 'data_fim', 'duracao', 'imagem_path', 'estado'],
            include: [
              {
                model: Categoria,
                as: "categoria",
                attributes: ['nome'],
                required: false
              },
              {
                model: Area,
                as: "area", 
                attributes: ['nome'],
                required: false
              }
            ]
          }
        ],
        order: [['data_inscricao', 'DESC']]
      });

      console.log(`üìä [INSCRICOES] ${inscricoes.length} inscri√ß√µes carregadas com relacionamentos`);

    } catch (queryError) {
      console.error('‚ùå [INSCRICOES] Erro na query principal:', queryError.message);
      
      // Fallback: query b√°sica sem relacionamentos
      try {
        console.log('üîÑ [INSCRICOES] Tentando query b√°sica...');
        
        inscricoes = await Inscricao_Curso.findAll({
          where: { id_utilizador },
          order: [['data_inscricao', 'DESC']]
        });

        console.log(`üìä [INSCRICOES] ${inscricoes.length} inscri√ß√µes carregadas (modo b√°sico)`);
      } catch (basicError) {
        console.error('‚ùå [INSCRICOES] Erro na query b√°sica:', basicError.message);
        return res.status(500).json({
          message: "Erro ao carregar inscri√ß√µes",
          error: process.env.NODE_ENV === 'development' ? basicError.message : 'Erro interno'
        });
      }
    }

    if (inscricoes.length === 0) {
      console.log('‚ÑπÔ∏è [INSCRICOES] Nenhuma inscri√ß√£o encontrada');
      return res.json([]);
    }

    // Processar dados para formato do frontend
    const inscricoesFormatadas = [];
    
    for (const inscricao of inscricoes) {
      try {
        let curso = inscricao.curso;
        
        // Se n√£o tem curso associado, carregar manualmente
        if (!curso && inscricao.id_curso) {
          try {
            curso = await Curso.findByPk(inscricao.id_curso, {
              attributes: ['id_curso', 'nome', 'tipo', 'data_inicio', 'data_fim', 'duracao', 'imagem_path', 'estado'],
              include: [
                {
                  model: Categoria,
                  as: "categoria",
                  attributes: ['nome'],
                  required: false
                },
                {
                  model: Area,
                  as: "area",
                  attributes: ['nome'],
                  required: false
                }
              ]
            });
          } catch (cursoError) {
            console.warn('‚ö†Ô∏è [INSCRICOES] Erro ao carregar curso individual:', cursoError.message);
          }
        }

        if (curso) {
          const inscricaoFormatada = {
            cursoId: curso.id_curso,
            nomeCurso: curso.nome || 'Curso sem nome',
            categoria: curso.categoria?.nome || 'Sem categoria',
            area: curso.area?.nome || 'Sem √°rea',
            dataInicio: curso.data_inicio || null,
            dataFim: curso.data_fim || null,
            cargaHoraria: curso.duracao || 0,
            tipo: curso.tipo || 'N/A',
            status: calcularStatusCurso(curso),
            estado_inscricao: inscricao.estado || 'inscrito',
            data_inscricao: inscricao.data_inscricao,
            imagem_path: curso.imagem_path || null
          };

          inscricoesFormatadas.push(inscricaoFormatada);
        } else {
          console.warn(`‚ö†Ô∏è [INSCRICOES] Curso n√£o encontrado para inscri√ß√£o ${inscricao.id_inscricao}`);
          
          // Incluir mesmo sem dados do curso
          const inscricaoFormatada = {
            cursoId: inscricao.id_curso,
            nomeCurso: 'Curso n√£o dispon√≠vel',
            categoria: 'Sem categoria',
            area: 'Sem √°rea',
            dataInicio: null,
            dataFim: null,
            cargaHoraria: 0,
            tipo: 'N/A',
            status: 'Indispon√≠vel',
            estado_inscricao: inscricao.estado || 'inscrito',
            data_inscricao: inscricao.data_inscricao,
            imagem_path: null
          };

          inscricoesFormatadas.push(inscricaoFormatada);
        }
      } catch (processError) {
        console.warn('‚ö†Ô∏è [INSCRICOES] Erro ao processar inscri√ß√£o individual:', processError.message);
      }
    }

    console.log(`‚úÖ [INSCRICOES] ${inscricoesFormatadas.length} inscri√ß√µes formatadas com sucesso`);
    res.json(inscricoesFormatadas);
    
  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro geral ao carregar hist√≥rico:', error.message);
    console.error('üìç [INSCRICOES] Stack trace:', error.stack);
    
    res.status(500).json({ 
      message: "Erro ao buscar inscri√ß√µes", 
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno',
      timestamp: new Date().toISOString()
    });
  }
};

// =============================================================================
// CRIA√á√ÉO E GEST√ÉO DE INSCRI√á√ïES
// =============================================================================

/**
 * Criar nova inscri√ß√£o em curso
 */
const createInscricao = async (req, res) => {
  try {
    console.log('üìù [INSCRICOES] A iniciar processo de nova inscri√ß√£o');
    const { id_utilizador, id_curso, motivacao, expectativas } = req.body;
    
    const userIdFromToken = req.user?.id_utilizador || req.utilizador?.id_utilizador;
    const userRole = req.user?.id_cargo || req.utilizador?.id_cargo;

    // Determinar utilizador para inscri√ß√£o
    const utilizadorParaInscrever = id_utilizador || userIdFromToken;

    // Verificar permiss√µes de inscri√ß√£o
    if (userRole !== 1 && utilizadorParaInscrever != userIdFromToken) {
      console.warn(`‚ö†Ô∏è [INSCRICOES] Utilizador ${userIdFromToken} tentou inscrever outro utilizador`);
      return res.status(403).json({
        message: "N√£o pode inscrever outros utilizadores em cursos"
      });
    }

    if (!utilizadorParaInscrever || !id_curso) {
      return res.status(400).json({
        message: "ID do utilizador e ID do curso s√£o obrigat√≥rios"
      });
    }

    // Verificar se j√° est√° inscrito
    const inscricaoExistente = await Inscricao_Curso.findOne({
      where: {
        id_utilizador: utilizadorParaInscrever,
        id_curso,
        estado: "inscrito"
      }
    });

    if (inscricaoExistente) {
      return res.status(400).json({
        message: "J√° est√° inscrito neste curso"
      });
    }

    // Obter e validar dados do curso
    const curso = await Curso.findByPk(id_curso);
    if (!curso) {
      return res.status(404).json({ message: "Curso n√£o encontrado" });
    }

    if (!curso.ativo) {
      return res.status(400).json({
        message: "Este curso n√£o est√° dispon√≠vel para inscri√ß√µes"
      });
    }

    // Verificar per√≠odo de inscri√ß√£o
    const dataAtual = new Date();
    if (dataAtual > new Date(curso.data_inicio)) {
      return res.status(400).json({
        message: "O per√≠odo de inscri√ß√£o deste curso j√° encerrou"
      });
    }

    // Gest√£o de vagas para cursos s√≠ncronos
    if (curso.tipo === "sincrono" && curso.vagas) {
      if (curso.vagas <= 0) {
        return res.status(400).json({
          message: "N√£o h√° vagas dispon√≠veis para este curso"
        });
      }

      // Decrementar vagas dispon√≠veis
      curso.vagas = curso.vagas - 1;
      await curso.save();
      console.log(`üìä [INSCRICOES] Vagas do curso ${id_curso} atualizadas`);
    }

    // Criar nova inscri√ß√£o
    const novaInscricao = await Inscricao_Curso.create({
      id_utilizador: utilizadorParaInscrever,
      id_curso,
      motivacao: motivacao || null,
      expectativas: expectativas || null,
      data_inscricao: new Date(),
      estado: "inscrito"
    });

    console.log(`‚úÖ [INSCRICOES] Nova inscri√ß√£o criada com ID ${novaInscricao.id_inscricao}`);

    // Enviar email de confirma√ß√£o (n√£o cr√≠tico)
    try {
      const utilizador = await User.findByPk(utilizadorParaInscrever);
      if (emailService && emailService.sendCourseInscricaoEmail) {
        await emailService.sendCourseInscricaoEmail(utilizador, curso);
        console.log('üìß [INSCRICOES] Email de confirma√ß√£o enviado');
      }
    } catch (emailError) {
      console.warn('‚ö†Ô∏è [INSCRICOES] Erro ao enviar email (n√£o cr√≠tico):', emailError.message);
    }

    res.status(201).json({
      message: "Inscri√ß√£o realizada com sucesso!",
      inscricao: {
        id: novaInscricao.id_inscricao,
        data_inscricao: novaInscricao.data_inscricao
      },
      vagasRestantes: curso.vagas
    });

  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro ao criar inscri√ß√£o:', error.message);
    
    res.status(500).json({
      message: "Erro no servidor ao processar inscri√ß√£o.",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Cancelar inscri√ß√£o em curso
 */
const cancelarInscricao = async (req, res) => {
  try {
    const { id } = req.params;
    const { motivo_cancelamento } = req.body;
    const userRole = req.user?.id_cargo || req.utilizador?.id_cargo;
    const userId = req.user?.id_utilizador || req.utilizador?.id_utilizador;

    console.log(`üóëÔ∏è [INSCRICOES] A iniciar cancelamento da inscri√ß√£o ${id}`);

    // Procurar inscri√ß√£o
    const inscricao = await Inscricao_Curso.findByPk(id);
    if (!inscricao) {
      return res.status(404).json({ message: "Inscri√ß√£o n√£o encontrada" });
    }

    // Verificar permiss√µes
    const curso = await Curso.findByPk(inscricao.id_curso);
    const isAdmin = userRole === 1;
    const isFormadorDoCurso = userRole === 2 && curso && userId === curso.id_formador;

    if (!isAdmin && !isFormadorDoCurso) {
      return res.status(403).json({
        message: "Apenas administradores e formadores do curso podem cancelar inscri√ß√µes"
      });
    }

    if (inscricao.estado === "cancelado") {
      return res.status(400).json({
        message: "Esta inscri√ß√£o j√° foi cancelada anteriormente."
      });
    }

    // Atualizar estado da inscri√ß√£o
    inscricao.estado = "cancelado";
    inscricao.motivo_cancelamento = motivo_cancelamento;
    inscricao.data_cancelamento = new Date();
    inscricao.cancelado_por = userId;
    await inscricao.save();

    // Atualizar vagas do curso se aplic√°vel
    if (curso && curso.vagas !== null) {
      curso.vagas += 1;
      await curso.save();
      console.log(`üìä [INSCRICOES] Vagas do curso incrementadas`);
    }

    console.log('‚úÖ [INSCRICOES] Inscri√ß√£o cancelada com sucesso');

    return res.json({
      message: "Inscri√ß√£o cancelada com sucesso",
      inscricao_cancelada_id: inscricao.id_inscricao
    });

  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro no cancelamento:', error.message);
    
    return res.status(500).json({
      message: "Erro ao processar cancelamento de inscri√ß√£o",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

/**
 * Obter inscri√ß√µes do utilizador autenticado com filtros
 */
const getInscricoesUtilizador = async (req, res) => {
  try {
    const id_utilizador = req.user?.id_utilizador || req.utilizador?.id_utilizador;
    console.log(`üìö [INSCRICOES] A carregar inscri√ß√µes ativas do utilizador ${id_utilizador}`);

    // Procurar inscri√ß√µes ativas
    const inscricoes = await Inscricao_Curso.findAll({
      where: {
        id_utilizador,
        estado: 'inscrito'
      },
      include: [
        {
          model: Curso,
          as: "curso",
          required: false,
          include: [
            {
              model: Categoria,
              as: "categoria",
              attributes: ['nome'],
              required: false
            },
            {
              model: Area,
              as: "area",
              attributes: ['nome'],
              required: false
            }
          ]
        }
      ],
      order: [['data_inscricao', 'DESC']]
    });

    console.log(`üìä [INSCRICOES] ${inscricoes.length} inscri√ß√µes ativas encontradas`);

    // Formatar dados para resposta
    const inscricoesFormatadas = inscricoes.map(inscricao => {
      const curso = inscricao.curso;
      return {
        id: inscricao.id_inscricao,
        cursoId: curso?.id_curso || null,
        nomeCurso: curso?.nome || 'Curso n√£o dispon√≠vel',
        categoria: curso?.categoria?.nome || "N/A",
        area: curso?.area?.nome || "N/A",
        dataInicio: curso?.data_inicio || null,
        dataFim: curso?.data_fim || null,
        tipoCurso: curso?.tipo || 'N/A',
        vagasTotais: curso?.vagas || null,
        dataInscricao: inscricao.data_inscricao,
        status: calcularStatusCurso(curso)
      };
    });

    res.json(inscricoesFormatadas);
  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro ao carregar inscri√ß√µes do utilizador:', error.message);
    res.status(500).json({
      message: "Erro ao procurar inscri√ß√µes",
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
};

// =============================================================================
// FUN√á√ïES AUXILIARES
// =============================================================================

/**
 * Calcular status atual de um curso baseado nas datas
 */
function calcularStatusCurso(curso) {
  if (!curso || !curso.data_inicio || !curso.data_fim) {
    return "Agendado";
  }

  const hoje = new Date();
  const dataInicio = new Date(curso.data_inicio);
  const dataFim = new Date(curso.data_fim);

  if (hoje < dataInicio) {
    return "Agendado";
  } else if (hoje >= dataInicio && hoje <= dataFim) {
    return "Em curso";
  } else {
    return "Terminado";
  }
}

/**
 * Remover todas as inscri√ß√µes relacionadas a um curso espec√≠fico
 */
const removerInscricoesDoCurso = async (id_curso, transaction) => {
  try {
    console.log(`üóëÔ∏è [INSCRICOES] A remover inscri√ß√µes do curso ${id_curso}`);
    
    const inscricoes = await Inscricao_Curso.findAll({
      where: { id_curso },
      transaction
    });

    await Inscricao_Curso.destroy({
      where: { id_curso },
      transaction
    });

    console.log(`‚úÖ [INSCRICOES] ${inscricoes.length} inscri√ß√µes removidas do curso ${id_curso}`);
    return inscricoes.length;
  } catch (error) {
    console.error('‚ùå [INSCRICOES] Erro ao remover inscri√ß√µes do curso:', error.message);
    throw error;
  }
};

module.exports = {
  getMinhasInscricoes,
  getAllInscricoes,
  getInscricoesPorCurso,
  createInscricao,
  cancelarInscricao,
  getInscricoesUtilizador,
  removerInscricoesDoCurso,
  verificarInscricao
};