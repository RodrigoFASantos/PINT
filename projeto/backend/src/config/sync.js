const sequelize = require("../config/db");
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Importar fun√ß√µes dos outros scripts
const { createTablesInOrder } = require('./criarTabelas');
const { criarPastasCompletas } = require('./criar_pastas_completas');

// Fun√ß√£o principal que orquestra o processo de sincroniza√ß√£o completo
async function syncronizarTudo() {
  try {
    console.log("\n==================================================");
    console.log("üöÄ INICIANDO PROCESSO DE SINCRONIZA√á√ÉO COMPLETA üöÄ");
    console.log("==================================================\n");

    // Teste de conex√£o
    console.log("Conectando ao banco de dados...");
    await sequelize.testConnection();
    console.log("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!");

    // Verificar se o sequelize est√° dispon√≠vel
    if (!sequelize || !sequelize.define) {
      console.error("‚ùå ERRO: O objeto sequelize importado n√£o √© v√°lido ou n√£o possui o m√©todo define!");
      console.log("Objeto sequelize:", sequelize);
      process.exit(1);
    }

    // ETAPA 1: Apagar todas as tabelas existentes
    console.log("\n==================================================");
    console.log("üóëÔ∏è ETAPA 1: APAGANDO TODAS AS TABELAS EXISTENTES");
    console.log("==================================================");
    await apagarTodasTabelas();

    // ETAPA 2: Criar tabelas na ordem correta
    console.log("\n==================================================");
    console.log("üìã ETAPA 2: CRIANDO TABELAS NA ORDEM CORRETA");
    console.log("==================================================");

    // Desabilitar verifica√ß√µes de chave estrangeira temporariamente para cria√ß√£o e inser√ß√£o de dados
    await sequelize.query("SET session_replication_role = 'replica';");

    // Criar as tabelas na ordem correta usando o m√≥dulo separado
    console.log("Criando tabelas na ordem correta...");
    await createTablesInOrder();
    console.log("‚úÖ Tabelas criadas com sucesso!");

    // ETAPA 3: Inserir dados de teste
    console.log("\n==================================================");
    console.log("üìä ETAPA 3: INSERINDO DADOS DE TESTE");
    console.log("==================================================");

    // Carregar os dados de teste
    const dadosSQL = carregarDadosTeste();
    console.log("Preparando dados de teste...");
    const testDataStatements = prepareSQLStatements(dadosSQL);
    console.log(`Preparados ${testDataStatements.length} comandos SQL para execu√ß√£o.`);

    await executeSQLStatements(testDataStatements);
    console.log("‚úÖ Dados de teste inseridos com sucesso!");

    // Reativar verifica√ß√µes de chave estrangeira
    await sequelize.query("SET session_replication_role = 'origin';");

    // ETAPA 4: Criar estrutura de pastas base
    console.log("\n==================================================");
    console.log("üìÅ ETAPA 4: CRIANDO ESTRUTURA DE PASTAS BASE");
    console.log("==================================================");
    await criarPastasCompletas();
    console.log("‚úÖ Estrutura de pastas base criada com sucesso!");

    // ETAPA 5: Criar pastas para cursos
    console.log("\n==================================================");
    console.log("üìö ETAPA 5: CRIANDO PASTAS PARA CURSOS");
    console.log("==================================================");
    await criarPastasParaCursos();
    console.log("‚úÖ Pastas para cursos criadas com sucesso!");

    // ETAPA 6: Criar pastas para usu√°rios
    console.log("\n==================================================");
    console.log("üë• ETAPA 6: CRIANDO PASTAS PARA USU√ÅRIOS");
    console.log("==================================================");
    await criarPastasParaUsuarios();
    console.log("‚úÖ Pastas para usu√°rios criadas com sucesso!");

    console.log("\n==================================================");
    console.log("üéâ SINCRONIZA√á√ÉO COMPLETA FINALIZADA COM SUCESSO! üéâ");
    console.log("==================================================\n");

    process.exit(0);
  } catch (error) {
    // Em caso de erro, certifique-se de reativar as verifica√ß√µes de chave estrangeira
    try {
      await sequelize.query("SET session_replication_role = 'origin';");
    } catch (e) {
      console.error("Erro ao reativar verifica√ß√µes de chave estrangeira:", e.message);
    }

    console.error("\n‚ùå ERRO DURANTE A SINCRONIZA√á√ÉO:");
    console.error(error.message);
    console.error("Detalhes do erro:", error);
    process.exit(1);
  }
}

/**
 * Fun√ß√£o para apagar todas as tabelas do banco de dados
 * (Adaptado do arquivo apagar_tabelas.js)
 */
async function apagarTodasTabelas() {
  try {
    console.log("üîÑ Iniciando processo de limpeza do banco de dados...");

    // Obter o nome do schema atual (geralmente 'public' em PostgreSQL)
    const [schemaResult] = await sequelize.query(`SELECT current_schema() as schema`);
    const schema = schemaResult[0].schema;
    console.log(`üîç Schema atual: ${schema}`);

    // Pegar uma lista de todas as tabelas no banco de dados
    const [tablesResult] = await sequelize.query(
      `SELECT tablename FROM pg_tables WHERE schemaname = '${schema}' AND 
       tablename NOT LIKE 'pg_%' AND tablename NOT LIKE 'sql_%'`
    );

    if (tablesResult.length === 0) {
      console.log("‚ÑπÔ∏è N√£o foram encontradas tabelas para apagar.");
      return;
    }

    console.log(`üîç Encontradas ${tablesResult.length} tabelas para apagar.`);

    // Primeiro, desabilitar todas as verifica√ß√µes de chave estrangeira
    console.log("üîì Desabilitando verifica√ß√µes de chave estrangeira...");
    await sequelize.query("SET CONSTRAINTS ALL DEFERRED;");

    // Preparar o comando para apagar todas as tabelas
    const tableNames = tablesResult.map(table => `"${table.tablename}"`).join(", ");

    console.log("üóëÔ∏è Apagando todas as tabelas...");
    await sequelize.query(`DROP TABLE IF EXISTS ${tableNames} CASCADE;`);

    // Tamb√©m eliminar todas as sequ√™ncias, que s√£o usadas para campos autoincrement/serial
    const [sequencesResult] = await sequelize.query(
      `SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = '${schema}'`
    );

    if (sequencesResult.length > 0) {
      console.log(`üîç Encontradas ${sequencesResult.length} sequ√™ncias para apagar.`);
      const sequenceNames = sequencesResult.map(seq => `"${seq.sequence_name}"`).join(", ");

      console.log("üóëÔ∏è Apagando todas as sequ√™ncias...");
      await sequelize.query(`DROP SEQUENCE IF EXISTS ${sequenceNames} CASCADE;`);
    }

    // Eliminar tamb√©m fun√ß√µes personalizadas que podem ter sido criadas
    const [functionsResult] = await sequelize.query(
      `SELECT routine_name FROM information_schema.routines 
       WHERE routine_schema = '${schema}' AND routine_type = 'FUNCTION'`
    );

    if (functionsResult.length > 0) {
      console.log(`üîç Encontradas ${functionsResult.length} fun√ß√µes para apagar.`);

      // Apagar cada fun√ß√£o individualmente
      for (const func of functionsResult) {
        try {
          console.log(`üóëÔ∏è Apagando fun√ß√£o: ${func.routine_name}`);
          await sequelize.query(`DROP FUNCTION IF EXISTS "${func.routine_name}" CASCADE;`);
        } catch (error) {
          console.error(`Erro ao apagar fun√ß√£o ${func.routine_name}:`, error.message);
          // Continua para a pr√≥xima fun√ß√£o
        }
      }
    }

    console.log("‚úÖ Todas as tabelas, sequ√™ncias e fun√ß√µes foram removidas com sucesso!");
    return true;
  } catch (error) {
    console.error("‚ùå Erro ao apagar tabelas:", error.message);
    throw error;
  }
}

/**
 * Fun√ß√£o para criar pastas para cursos
 * (Adaptado do arquivo criar_pastas_cursos.js)
 */
async function criarPastasParaCursos() {
  const BASE_UPLOAD_DIR = path.join(process.cwd(), process.env.CAMINHO_PASTA_UPLOADS || 'uploads');
  
  try {
    console.log('Conectando ao banco de dados...');
    const conexaoOk = await sequelize.testConnection();
    if (!conexaoOk) {
      throw new Error('N√£o foi poss√≠vel conectar ao banco de dados.');
    }

    console.log('Buscando cursos na base de dados...');
    const [cursos] = await sequelize.query(
      'SELECT id_curso, nome, imagem_path, dir_path FROM curso WHERE imagem_path IS NOT NULL'
    );

    console.log(`Encontrados ${cursos.length} cursos para processar.`);

    for (const curso of cursos) {
      const imagemPath = path.join(process.cwd(), curso.imagem_path);
      const dirPath = path.dirname(imagemPath);

      console.log(`\nProcessando curso: ${curso.nome} (ID: ${curso.id_curso})`);
      console.log(`Caminho da imagem: ${imagemPath}`);
      console.log(`Diret√≥rio: ${dirPath}`);

      if (!fs.existsSync(dirPath)) {
        try {
          fs.mkdirSync(dirPath, { recursive: true });
          console.log(`‚úÖ Diret√≥rio criado com sucesso.`);
        } catch (error) {
          console.error(`‚ùå Erro ao criar diret√≥rio: ${error.message}`);
          continue;
        }
      } else {
        console.log(`‚ÑπÔ∏è Diret√≥rio j√° existe.`);
      }

      if (!fs.existsSync(imagemPath)) {
        try {
          const placeholderPath = path.join(BASE_UPLOAD_DIR, 'placeholder.png');

          if (fs.existsSync(placeholderPath)) {
            fs.copyFileSync(placeholderPath, imagemPath);
            console.log(`‚úÖ Imagem placeholder copiada.`);
          } else {
            fs.writeFileSync(
              imagemPath,
              `Este √© um placeholder para: ${curso.nome}\nSubstitua este arquivo por uma imagem real.`
            );
            console.log(`‚úÖ Arquivo placeholder de texto criado.`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao criar imagem: ${error.message}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è Imagem j√° existe.`);
      }
    }

    console.log('Processo de cria√ß√£o de pastas para cursos conclu√≠do!');
  } catch (error) {
    console.error('‚ùå Erro durante o processamento de pastas para cursos:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o para criar pastas para usu√°rios
 * (Adaptado do arquivo criar_pastas_users.js)
 */
async function criarPastasParaUsuarios() {
  const BASE_UPLOAD_DIR = path.join(process.cwd(), process.env.CAMINHO_PASTA_UPLOADS || 'uploads');
  
  try {
    console.log('Conectando ao banco de dados...');
    const conexaoOk = await sequelize.testConnection();
    if (!conexaoOk) {
      throw new Error('N√£o foi poss√≠vel conectar ao banco de dados.');
    }

    console.log('Buscando usu√°rios na base de dados...');
    const [usuarios] = await sequelize.query(
      'SELECT id_utilizador, nome, email, foto_perfil, foto_capa FROM utilizadores'
    );

    console.log(`Encontrados ${usuarios.length} usu√°rios para processar.`);

    // Garantir que a pasta base de uploads/users exista
    const usersBaseDir = path.join(BASE_UPLOAD_DIR, 'users');
    if (!fs.existsSync(usersBaseDir)) {
      fs.mkdirSync(usersBaseDir, { recursive: true });
      console.log(`‚úÖ Diret√≥rio base de usu√°rios criado: ${usersBaseDir}`);
    }

    // Verificar se existem as imagens padr√£o
    const avatarPadrao = path.join(usersBaseDir, 'AVATAR.png');
    const capaPadrao = path.join(usersBaseDir, 'CAPA.png');

    if (!fs.existsSync(avatarPadrao)) {
      console.log('‚ö†Ô∏è Imagem padr√£o de avatar n√£o encontrada. Criando placeholder...');
      try {
        // Voc√™ pode substituir isto por uma c√≥pia de uma imagem real
        fs.writeFileSync(
          avatarPadrao,
          'Este √© um placeholder para avatar. Substitua por uma imagem real.'
        );
        console.log(`‚úÖ Arquivo placeholder de avatar criado em ${avatarPadrao}`);
      } catch (error) {
        console.error(`‚ùå Erro ao criar avatar padr√£o: ${error.message}`);
      }
    }

    if (!fs.existsSync(capaPadrao)) {
      console.log('‚ö†Ô∏è Imagem padr√£o de capa n√£o encontrada. Criando placeholder...');
      try {
        // Voc√™ pode substituir isto por uma c√≥pia de uma imagem real
        fs.writeFileSync(
          capaPadrao,
          'Este √© um placeholder para capa. Substitua por uma imagem real.'
        );
        console.log(`‚úÖ Arquivo placeholder de capa criado em ${capaPadrao}`);
      } catch (error) {
        console.error(`‚ùå Erro ao criar capa padr√£o: ${error.message}`);
      }
    }

    // Processar cada usu√°rio
    for (const usuario of usuarios) {
      console.log(`\nProcessando usu√°rio: ${usuario.nome} (ID: ${usuario.id_utilizador})`);

      // Verificar se o usu√°rio tem email
      if (!usuario.email) {
        console.log(`‚ö†Ô∏è Usu√°rio ${usuario.nome} (ID: ${usuario.id_utilizador}) n√£o tem email. Pulando.`);
        continue;
      }

      // Criar slug do usu√°rio baseado no email
      const userSlug = usuario.email.replace(/@/g, '_at_').replace(/\./g, '_');
      const userDir = path.join(usersBaseDir, userSlug);

      console.log(`Diret√≥rio de usu√°rio: ${userDir}`);

      // Criar pasta do usu√°rio
      if (!fs.existsSync(userDir)) {
        try {
          fs.mkdirSync(userDir, { recursive: true });
          console.log(`‚úÖ Diret√≥rio de usu√°rio criado com sucesso.`);
        } catch (error) {
          console.error(`‚ùå Erro ao criar diret√≥rio de usu√°rio: ${error.message}`);
          continue;
        }
      } else {
        console.log(`‚ÑπÔ∏è Diret√≥rio de usu√°rio j√° existe.`);
      }

      // Definir caminhos para as imagens
      const avatarFilename = `${usuario.email}_AVATAR.png`;
      const capaFilename = `${usuario.email}_CAPA.png`;
      
      const avatarPath = path.join(userDir, avatarFilename);
      const capaPath = path.join(userDir, capaFilename);

      // Verificar e criar imagem de perfil
      if (!fs.existsSync(avatarPath)) {
        try {
          fs.copyFileSync(avatarPadrao, avatarPath);
          console.log(`‚úÖ Imagem de perfil (avatar) criada: ${avatarPath}`);
        } catch (error) {
          console.error(`‚ùå Erro ao criar imagem de perfil: ${error.message}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è Imagem de perfil j√° existe.`);
      }

      // Verificar e criar imagem de capa
      if (!fs.existsSync(capaPath)) {
        try {
          fs.copyFileSync(capaPadrao, capaPath);
          console.log(`‚úÖ Imagem de capa criada: ${capaPath}`);
        } catch (error) {
          console.error(`‚ùå Erro ao criar imagem de capa: ${error.message}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è Imagem de capa j√° existe.`);
      }

      // Atualizar refer√™ncias no banco de dados se necess√°rio
      const dbPathAvatar = `uploads/users/${userSlug}/${avatarFilename}`;
      const dbPathCapa = `uploads/users/${userSlug}/${capaFilename}`;

      // Verificar se precisa atualizar as refer√™ncias no banco
      if (usuario.foto_perfil !== dbPathAvatar || usuario.foto_capa !== dbPathCapa) {
        try {
          await sequelize.query(
            'UPDATE utilizadores SET foto_perfil = ?, foto_capa = ? WHERE id_utilizador = ?',
            {
              replacements: [dbPathAvatar, dbPathCapa, usuario.id_utilizador]
            }
          );
          console.log(`‚úÖ Refer√™ncias de imagens atualizadas no banco de dados.`);
        } catch (error) {
          console.error(`‚ùå Erro ao atualizar banco de dados: ${error.message}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è Refer√™ncias de imagens j√° est√£o corretas no banco de dados.`);
      }
    }

    console.log('Processo de cria√ß√£o de pastas para usu√°rios conclu√≠do!');
  } catch (error) {
    console.error('‚ùå Erro durante o processamento de pastas para usu√°rios:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o para carregar os dados de teste do arquivo SQL
 */
function carregarDadosTeste() {
  const sqlPath = path.join(__dirname, './dados_teste.sql');
  try {
    return fs.readFileSync(sqlPath, 'utf-8');
  } catch (error) {
    console.error(`‚ùå Erro ao carregar dados de teste: ${error.message}`);
    console.log('Continuando sem dados de teste...');
    return '';
  }
}

/**
 * Divide o script SQL em comandos individuais, preservando blocos PL/pgSQL
 */
function prepareSQLStatements(sqlScript) {
  if (!sqlScript || sqlScript.trim() === '') {
    return [];
  }

  const statements = [];
  let currentStatement = '';
  let inPlpgsqlBlock = false;

  // Dividir o script em linhas
  const lines = sqlScript.replace(/\r\n/g, '\n').split('\n');

  for (let line of lines) {
    // Ignorar linhas de coment√°rio
    if (line.trim().startsWith('--')) {
      continue;
    }

    // Detectar in√≠cio de bloco PL/pgSQL
    if (line.trim().startsWith('DO $$')) {
      inPlpgsqlBlock = true;
      currentStatement = line;
      continue;
    }

    // Detectar fim de bloco PL/pgSQL
    if (inPlpgsqlBlock && line.trim() === 'END $$;') {
      currentStatement += '\n' + line;
      statements.push(currentStatement.trim());
      currentStatement = '';
      inPlpgsqlBlock = false;
      continue;
    }

    // Se estamos dentro de um bloco PL/pgSQL, adicionar a linha ao bloco
    if (inPlpgsqlBlock) {
      currentStatement += '\n' + line;
      continue;
    }

    // Para comandos normais, adicionar a linha e verificar se termina com ponto e v√≠rgula
    currentStatement += (currentStatement ? '\n' : '') + line;

    if (line.trim().endsWith(';')) {
      const trimmedStmt = currentStatement.trim();
      if (trimmedStmt) {
        statements.push(trimmedStmt);
      }
      currentStatement = '';
    }
  }

  // Adicionar qualquer comando restante
  if (currentStatement.trim()) {
    statements.push(currentStatement.trim());
  }

  return statements;
}

/**
 * Execute SQL statements in sequence
 */
async function executeSQLStatements(statements) {
  if (!statements || statements.length === 0) {
    console.log('‚ö†Ô∏è Nenhum comando SQL para executar.');
    return;
  }

  for (let i = 0; i < statements.length; i++) {
    const stmt = statements[i];
    try {
      console.log(`Executando comando SQL ${i + 1}/${statements.length}`);
      await sequelize.query(stmt);
      console.log(`‚úÖ Comando SQL ${i + 1} executado com sucesso.`);
    } catch (error) {
      console.error(`‚ùå Erro ao executar comando SQL ${i + 1}/${statements.length}:`);
      console.error(error.message);
      // Continua a execu√ß√£o para permitir que outros comandos sejam tentados
    }
  }
}

// Executar a fun√ß√£o principal
if (require.main === module) {
  syncronizarTudo();
} else {
  module.exports = { syncronizarTudo };
}